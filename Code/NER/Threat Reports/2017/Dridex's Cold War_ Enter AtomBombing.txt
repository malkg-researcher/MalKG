Dridex’s Cold War: Enter AtomBombing 
February 
28, 
2017 
| 
By 
Magal 
Baz 
(https://securityintelligence.com/author/magal-baz/) 
Co-authored 
by 
Or 
Safran 
(https://securityintelligence.com/author/or­
safran/) 

xtu 

Bigstock 
IBM X-Force discovered that Dridex, one of the most nefarious banking Trojans active in the .nancial cybercrime arena, recently underwent a major version upgrade that is already active in online banking attacks in Europe. 
A few weeks ago, our cybercrime labs detected a new major version of the Dridex banking Trojan, Dridex v4. The updated code features a new and 
innovative 
injection 
method 
based 
on 
a 
technique 
dubbed 
AtomBombing, 
which 
was 
.rst 
disclosed 
in 
October 
2016 
by 
security 
.rm 
enSilo 
(http://blog.ensilo.com/atombombing-a-code-injection-that-bypasses-current-security-solutions). 

Dridex is the only banking Trojan we have encountered to use AtomBombing. This change is especially signi.cant when it involves Trojans believed to be operated by an organized cybercrime gang because it’s likely to result in other codes adopting the same method in the future. 
Dridex’s developers also worked on a major upgrade to the malware’s con.guration encryption. This upgrade includes implementing a modi.ed naming algorithm, a robust but easy-to-spot persistence mechanism and a few additional enhancements. 
According to IBM Security detection, Dridex v4 is already out and active in campaigns that mostly target UK banks. Dridex attacks on online banking 
users 
in 
the 
UK 
are 
based 
on 
its 
hVNC 
RAT 
capabilities 
(https://securityintelligence.com/anatomy-of-an-hvnc-attack/) 
and 
redirection 
attack 
(https://securityintelligence.com/dridex-launches-dyre-like-attacks-in-uk-intensi.es-focus-on-business-accounts/) 
scheme, 
which 
appears to have replaced the webinjects method as Dridex’s top M.O. 
A Major Version Is a Major Deal 
Dridex’s 
code 
is 
based 
on 
that 
of the 
Bugat 
Trojan, 
which 
was 
.rst 
discovered 
in 
early 
2010 
(https://www.scmagazine.com/new-bugat-trojan­
harvesting-banking-credentials/article/557370/). 
Bugat 
has 
since 
evolved 
into 
a 
number 
of 
different 
variations, 
including 
Cridex 
and 
Feodo. 
The Dridex form .rst appeared in 2014. 
When it comes to their development cycles, Dridex’s authors release minor versions quite often, and a major version much less frequently. The releases of the minor and major versions are easy to spot since Dridex’s developers clearly track their releases. 
Dridex’s build numbers are found inside its con.guration and in the binary’s code. 

3/1/2017 Dridex's Cold War: Enter AtomBombing 
Figure 1: Dridex’s code version hard-coded into the binary. 
When it comes to major versions for Dridex, the most stable and resilient version to date has been v3, which was released in April 2015 and has been used in all known attack campaigns up until the v4 release. 
Dridex v2 did not enjoy the same kind of longevity and was only active in early 2015. The .rst version, released in late 2014, lasted only until the beginning of 2015. 
The release of a major version upgrade is a big deal for any software, and the same goes for malware. The signi.cance of this upgrade is that Dridex continues to evolve in sophistication, investing in further efforts to evade security and enhance its capabilities to enable .nancial fraud. 
READ 
THE 
WHITE 
PAPER: 
HOW 
TO 
OUTSMART 
FRAUDSTERS 
WITH 
COGNITIVE 
FRAUD 
DETECTION 
h(HTTPS://WWW­
01.IBM.COM/MARKETING/IWM/DRE/SIGNUP?SOURCE=MRS-FORM­
9451&S_PKG=OV54550&CE=ISM0484&CT=SWG&CMP=IBMSOCIAL&CM=H&CR=SECURITY&CCY=US) 


How ‘Bout That Code Injection? 
When it comes to malware detection, the injection of malicious code from one process into another is one of the most popular events antivirus and other security solutions aim to monitor and use as an indication of compromise. 
Most .nancial malware uses three steps to inject code: remote memory allocation, remote writing of a payload into the allocated memory and, .nally, remote execution of the payload. Malware commonly uses the CreateRemoteThread method to execute a payload or to call LoadLibrary, typically using the following application program interface (API) calls: 

VirtualAllocEx 
to allocate a buffer in the remote process with RWX permissions; 


WriteProcessMemory 
to copy the payload to the allocated buffer; and 


CreateRemoteThread 
to execute the payload. 


The problem is that this is a very suspicious and obvious way to inject code. And since it’s likely to raise red .ags, malware authors would much rather use alternative methods. 

Enter AtomBombing, but Only Halfway Through 
In 
October 
2016, 
enSilo 
researchers 
exposed 
a 
new 
code 
injection 
technique 
(https://breakingmalware.com/injection­
techniques/atombombing-brand-new-code-injection-for-windows/) 
called 
AtomBombing, 
which 
allows 
the 
malware 
to 
inject code without making any of the aforementioned API calls. 
Rather, AtomBombing makes use of Windows’ atom tables and the native API NtQueueApcThread to copy a payload into a read-write (RW) memory space in the target process. It then uses NtSetContextThread to invoke a simple return-oriented programming (ROP) chain that allocates read/write/execute (RWX) memory, copies the payload into it and executes it. Finally, it restores the original context of the hijacked thread. 
In our analysis of the new Dridex v4 release, we discovered that the malware’s authors have devised their own injection method, using the .rst step of the AtomBombing technique. They use the atom tables and NtQueueAPCThread to copy a payload and an import table into a RW memory space in the target process. But they only went halfway — they used the AtomBombing technique for the writing of the payload, then used a different method to achieve execution permissions, and for the execution itself. 
Nonetheless, this is the .rst implementation of AtomBombing within the context of banking Trojans, probably designed to help Dridex avoid detection. 
Getting the Payload to the Target Process 
This stage is almost identical to what is described in the EnSilo blog, so we’ll explain it brie.y here and focus on what’s unique in Dridex’s implementation of this method. 
Throughout the injection .ow, Dridex needs arbitrary code to be executed by a thread in a targeted process. To do that, it uses Windows asynchronous procedure calls (APC) by calling the NtQueueAPCThread API. 
There’s a reason here for using the native API instead of opting for kernel32!QueueUserAPC. It allows three parameters to be passed to the APC routine being called instead of just one parameter allowed by kernel32!QueueUserAPC. 
To test whether a thread is alertable, Dridex creates an event and uses an APC request to get the thread to run NtSetEvent to it. It uses a loop to do that with several of the target process’s threads, then calls WaitForMultipleObjects to select the .rst thread to signal its event. 

Figure 2: The call to kernel32!CreateEventA. 

Writing the Import Table 
Next, 
Dridex 
gets 
the 
injected 
process 
to 
run 
memset, 
again 
via 
the 
NtQueueAPCThread 
API, 
to 
zero-out 
a 
RW 
memory 
space 
inside 
Ntdll’s 
(https://msdn.microsoft.com/en-us/library/aa939273%28v=winembedded.5%29.aspx) 
address 
space. 
It 
then 
starts 
writing 
the 
import 
table 
to 
the allocated memory to be used later by the payload. 
The writing is done by .rst putting the data of the import table into an atom table using a call to GlobalAddAtomW. Next, the malware uses the NtQueueAPCThread API to get the target thread to call GlobalGetAtomW, which retrieves the data and places it in the RW memory space in Ntdll. 

Figure 3: Copying the import table data (from injecting process). 

Figure 4: The import table being built at injected process. 


Writing the Payload and Then AtomBombing Out 
After handling the import table, the payload is written to another RW address space using the same technique, only this time writing large chunks of payload code at each call to GlobalGetAtomW. 
At 
this 
point, 
the 
.ow 
differs 
from 
the 
one 
described 
in 
the 
AtomBombing 
technique 
(https://securityintelligence.com/news/windows-atom­
tables-blow-security-researchers-say/). 
To 
get 
the 
payload 
into 
an 
executable 
memory 
space, 
Dridex 
simply 
calls 
NtProtectVirtualMemory 
from 
the injecting process to change the memory where the payload is already written into RWX. It’s a simple .x and a small compromise for the sake of the overall technique, designed to avoid making suspicious API calls, which are usually monitored by security software. 
Executing the Payload 
After the preparation, the last stage is the execution of the payload. To avoid calling CreateRemoteThread, Dridex again uses APC. Using an APC call to the payload itself would be very suspicious, however, and could be detected and stopped. Instead, it uses the same GlobalGetAtomW method to patch GlobalGetAtomA, hooking it to execute the payload. 

Figure 5: Changing protection of .rst 7 bytes of GlobalGetAtomNameA to RWX (0X40). 

Figure 6: GlobalGetAtomNameA at injected process (permission changed and code patched to jump to payload). 


Additional Enhancements in Dridex v4 
Besides building out a new code injection method, Dridex v4 differs from the older versions in several other ways. Below are some of the enhancements made to the code in the new release. 
A Modi.ed Naming Algorithm 
Dridex uses its own method to generate MD5 hashes using a string concatenation of the hostname, active user name, OS installation date and an added seed. These hashes are used for many purposes. They can be mutex names, event names, key names for con.gurations in the registry, RC4 keys and more. 
In the new version, while the same variables are still being used to generate these hashes, the sequence has changed to shuf.e things around and prevent detection by automated checks. 

Enhanced Encryption for the Con.guration 
Dridex’s con.gurations contain many details about its targets and the attack types used in each case. Dridex also serves up its redirection scheme from the con.guration, which makes it a .le it aims to protect. 
In 
v4, 
Dridex’s 
developers 
signi.cantly 
upgraded 
the 
cryptographic 
protection 
(https://securityintelligence.com/living-in-the-past-business­
encryption-needs-to-get-with-the-times-or-get-hacked/) 
for 
the 
con.guration. 
Overall, 
Dridex 
continues 
to 
use 
the 
same 
multilayered 
approach 
it used in v3 variants, but it has changed and enhanced the encryption while still relying heavily on the RC4 cipher. 
The unique binary format in which Dridex keeps its target list con.gurations, such as the URLs of targeted banks, has also received a cryptographic upgrade to keep targeted entities in the dark as much as possible. 

Updated Persistence Mechanism 
Up until the recent v3 build, Dridex used a very speci.c, invisible persistence mechanism. This method was called invisible because it was not present at all as long as the infected endpoint was up and running. Only before a shutdown of the operating system, Dridex’s dynamic link library (DLL) would get written to disk, and a registry value (HKCU\Software\Microsoft\Windows\CurrentVersion\Run) was created to execute the malicious DLL upon reboot. 
The method was completely abandoned in v4, and Dridex now uses a DLL-hijacking technique instead. An executable is copied from system32 into a different directory and Dridex’s DLL is placed in that same directory. The malicious DLL mimics a legitimate DLL that’s loaded by the executable. 
According to Windows .le path priority, the malicious DLL gets loaded instead of the original one, which is located in system32. These setups are placed in system32 and %AppData% folders and executed by registry run keys and scheduled tasks. 
X-Force research noted that this method was already observed in some of the last v3 builds detected in the past few months, but v4 has fully adopted this robustness-over-stealth approach for its persistence mechanism. 


Conclusion 
The Dridex malware project continues to evolve, and 2017 is likely to be another year of change for this Trojan. 
Over 
the 
long 
reign 
of Dridex 
v3, 
we 
have 
seen 
some 
signi.cant 
changes 
implemented 
into 
the 
malware’s 
operations, 
such 
as 
modi.ed 
anti-research 
techniques 
(https://securityintelligence.com/protected-api-calls-and-string-constants-looting-dridexs-candy-box/), 
redirection 
attacks 
(https://securityintelligence.com/dridex-launches-dyre-like-attacks-in-uk-intensi.es-focus-on-business-accounts/) 
and fraudulent M.O. changes. It is not surprising to see a new major version released from this gang’s developers. 
In this release, we noted that special attention was given to dodging antivirus (AV) products and hindering research by adopting a series of enhanced anti-research and anti-AV capabilities. 
The changes to Dridex’s code injection method are among the most signi.cant enhancements in v4. They allow Dridex to propagate in the infected endpoint with minimal calls to marked API functions. 
The adoption of a new injection technique shortly after its discovery demonstrates Dridex’s efforts to keep up with the times and the evolution of security controls. Although they relied on a publicized method, Dridex’s developers created their own version of it, a choice that is consistent with their usual preference to write proprietary code schemes for Dridex, as they did for its binary con.guration format, for example. 
IOCs 
3/1/2017 Dridex's Cold War: Enter AtomBombing 
In this research we analyzed Dridex sample MD5s 4599fca4b67c9c216c6dea42214fd1ce and 1e6c6123af04d972b61cd3cde5e0658e. 
Dridex is featured in an X-Force 
Exchange 
(https://www.ibm.com/us-en/marketplace/threat-intelligence-api? 
ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US) 
collection, which is updated regularly. You can view the collection and contribute to it here 
(https://exchange.xforce.ibmcloud.com/collection/Dridex-Ongoing-Collection-e49edad121083d7986dc35009dbdeeae). 
IBM Security has a great deal of information on Dridex v4 and its attack schemes and can help banks and other targeted organizations learn more about this high-risk threat. To help stop threats like Dridex, banks and service providers can use adaptive solutions to detect infections and protect 
customer 
endpoints 
(http://www.ibm.com/software/products/en/trusteer-rapport? 
ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US) 
when malware evolves or enhances its focus on the organization’s locale. 
Fighting evolving threats such as Dridex attacks can be made easier with the right malware 
detection 
solutions 
(http://www-03.ibm.com/software/products/en/trusteer-pinpoint-detect?ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US). With protection layers designed to address the ever-changing threat landscape, .nancial organizations can bene.t from malware intelligence that provides real-time insight into fraudster techniques and capabilities. 
Consumers 
wishing 
to 
protect 
themselves 
from 
malware 
infections 
on 
endpoints 
and 
mobile 
devices 
are 
invited 
to 
read 
our 
best 
practices 
page 
(https://securityintelligence.com/mitigating-malware-modern-mobile-world/). 

READ 
THE 
WHITE 
PAPER: 
HOW 
TO 
OUTSMART 
FRAUDSTERS 
WITH 
COGNITIVE 
FRAUD 
DETECTION 
h(HTTPS://WWW­
01.IBM.COM/MARKETING/IWM/DRE/SIGNUP?SOURCE=MRS-FORM­
9451&S_PKG=OV54550&CE=ISM0484&CT=SWG&CMP=IBMSOCIAL&CM=H&CR=SECURITY&CCY=US) 

Tags: 
Advanced 
Threats 
(https://securityintelligence.com/tag/advanced-threats/) 
| 
Dridex 
(https://securityintelligence.com/tag/dridex/) 
| 
Financial 
Malware 
(https://securityintelligence.com/tag/.nancial-malware/) 
| 
IBM 
X-Force 
(https://securityintelligence.com/tag/ibm-x-force/) 
| 
IBM 
X-Force 
Exchange 
(https://securityintelligence.com/tag/ibm-x-force-exchange/) 
| 
IBM 
X-Force 
Research 
(https://securityintelligence.com/tag/ibm-x-force-research/) 
| 
Malware (https://securityintelligence.com/tag/malware/) 
Share this Article: xtu 
MagalBaz(https://securityintelligence.com/author/magal-baz/)MalwareResearcher,IBMTrusteerMagalBazisamalwareresearcherforIBMSecurity'sTrusteer'sgroup.HehasbeenamemberoftheTrusteercybercrimelabsforthepasttwoyears.Magalhasakeeninterestinnetwork security,reverseengineeringandmalwareanalysis.SEEALLPOSTSeRELATED ARTICLES 
Govern 
Your 
API 
Banking 
Environment 
(https://securityintelligence.com/govern-your-api-banking-environment/) 

Read 
More 
(https://securityintelligence.com/govern-your-api-banking-environment/) 



Adaptive 
Security: 
The 
Safety 
Net 
in 
the 
Flying 
Trapeze 
Act 
(https://securityintelligence.com/adaptive-security-the­
safety-net-in-the-.ying-trapeze-act/) 

Read 
More 
(https://securityintelligence.com/adaptive-security-the-safety-net-in-the-.ying-trapeze-act/) 



It’s 
Time 
for 
Users 
to 
Pony 
Up 
and 
Quit 
Reusing 
Passwords 
(https://securityintelligence.com/its-time-for-users-to­
pony-up-and-quit-reusing-passwords/) 

Read 
More 
(https://securityintelligence.com/its-time-for-users-to-pony-up-and-quit-reusing-passwords/) 

On-Demand Webinar 


The 
Cognitive 
Security 
Era 
Starts Now: 
How 
Watson 
is Revolutionizing... 


(https://securityintelligence.com/events/qradar-advisor-cognitive-security-operations-center-soc­
ibm-watson/) 

Featured Article 

Adaptive 
Security: 
The 
Safety Net 
in 
the 
Flying 
Trapeze 
Act(https://securityintelligence.com/adaptive-security-the-safety-net-in-the-.ying-trapeze-act/) 

By 
Assaf 
Regev 
(https://securityintelligence.com/author/assaf-regev/) 

(https://securityintelligence.com/events/ibm-interconnect-2017/) 

(https://securityintelligence.com) 
The 
views and 
opinions expressed 
in 
this article 
are 
those 
of 
the 
authors and 
do 
not 
necessarily re.ect 
the 
o.cial 
policy or 
position 
of 
IBM. 
CONTRIBUTORS 
(/CONTRIBUTORS)B(http://ibm.com/security?BECOME 
A 
CONTRIBUTOR 
(HTTPS://SECURITYINTELLIGENCE.COM/BECOME-A-CONTRIBUTOR/) 
ce=ISM0484&ct=SWG&cmp=IBMSv (http://feeds.feedburner.com/SecurityIntelligence)v (http://feeds.feedburner.com/SecurityIntelligence)v (http://feeds.feedburner.com/SecurityIntelligence)v (http://feeds.feedburner.com/SecurityIntelligence)v (http://feeds.feedburner.com/SecurityIntelligence)v (http://feeds.feedburner.com/SecurityIntelligence)v (http://feeds.feedburner.com/SecurityIntelligence)©2017IBM(http://www.ibm.com?ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US)|Contact(http://www.ibm.com/contact/us/en/?ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US&ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US)|Privacy(http://www.ibm.com/privacy/us/en/?ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US&ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US) 
| 
Terms Of 
Use 
(http://www.ibm.com/legal/us/en/? 
ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US&ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US) 
| 
Accessibility 
(http://www.ibm.com/accessibility/us/en/? 
ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US&ce=ISM0484&ct=SWG&cmp=IBMSocial&cm=h&cr=Security&ccy=US) 



