ss
dwrs
sd 
r 


21 
2016 
Joseph 
Landry 
Attackers 
have 
been 
successfully 
deploying 
RATs 
for 
years 
to 
remotely 
control 
users 
systems 
-giving 
them 
full 
access 
to 
the 
victim’s 
files 
or 
resources 
such 
as 
cameras, 
recording 
key 
strokes, 
or� 
downloading 
further 
malware. 
Traditionally 
RATs 
have 
been 
deployed 
when 
a 
user 
opens 
an 
email 
attachment, 
or 
downloads 
a 
file 
from 
a 
website 
or 
peer-to-peer 
network. 
In 
both 
cases, 
these 
vectors� 
involve 
use 
of 
files 
to 
deliver 
the 
payload 
-which 
are 
easier 
to 
detect.� 


Recently 
we 
detected 
a 
more 
sophisticated 
technique 
that 
a 
handful 
of 
countries 
across 
Asia 
are 
actively 
using 
to 
infect 
systems 
with 
RATs. 
This 
new 
technique 
ensures 
that 
the 
payload/file 
remains 
in� 
memory 
through 
its 
execution, 
never 
touching 
the 
disk 
in 
a 
de-encrypted 
state. 
In 
doing 
so, 
the 
attacker 
can 
remain 
out 
of 
view 
from 
antivirus 
technologies, 
and 
even 
‘next-generation’ 
technologies 
that 
only 
focus 
on 
file-based 
threat 
vectors. 
Also, 
the 
samples 
analyzed 
have 
the 
ability 
detect 
the� 
presence 
of 
a 
virtual 
machine 
to 
ensure 
it’s 
not 
being 
analyzed 
in 
a 
network 
sandbox. 


And 
finally 
it’s 
important 
to 
highlight 
that 
the 
RAT 
itself 
is 
not 
new. 
In 
fact 
this 
technique 
can 
be 
used 
to� 
deliver 
any 
“known” 
RAT 
to 
a 
victim’s 
system. 
We 
analyzed 
this 
sample 
against 
our 
SentinelOne 
EPP 
to 
confirm 
is 
does 
not 
evade 
our 
behavior-based 
detection 
mechanisms. 
This 
is 
due 
to 
the 
fact 
that� 
we’re 
monitoring 
all 
processes 
at 
the 
user-space/kernel-space 
interface 
-and 
because 
all 
communication 
between 
the 
application 
and 
the 
kernel 
must 
be 
unencrypted, 
we 
detect 
the 
sample 
at 
both 
process-injection 
points. 



SamplesAnalyzedMainSampler32ENE20H256su95511531906896689563522d912d1912280188H1su3153509281d061186d3393555su65522d63d12182665d9
sz32102s32UnpackedSamples
◦e5c71180f117270538487cd9b9b1b6d8-Packed"Benchmark"DLL▪
9e05fb115bd4e85cfc0e32c72aa721be-Monitor(PerfWatson.exe)◦
d740ed3f33ca4cef3a6aa717f94bf52a-NanoCoreRATdumpedfrommemoryBehavioralAnalysisWhenrun,thebinarywillcopyitselfto%APPDATA%\Microsoft\Blend\14.0\FeedCache\nvSCPAPISrv.exeandextractsasecondbinarynamedPerfWatson.exe
It 
then 
executes 
both 
binaries. 



For 
persistence, 
a 
registry 
key 
is 
created 
at 
HKEY_CURRENT_USER\Software\Microsoft\Windows 
NT\CurrentVersion\Windows\Load 
pointing 
to 
the 
PerfWatson.exe 
binary. 



Finally,theRATtriesconnectingbacktoitscontrolserver:
z2015r161zr161chickenkiller.comisownedbyafreedynamicDNSservice.
Atthetimeofthiswriting,theDNSrecordsstillexist,buttheaddresstheyresolvetoappearstobedown.
Unpacking"Benchmark".NETDLLThemainexecutablecontainsanXORencrypted.NETDLLinits.NETmanagedresourcesandthelogictounpackit.ThisDLLcontainsthelogictounpackandinjecttheRATaswellasmonitortheapplication,PerfWatson.exe.ThisDLLisreferredtoas"Benchmark"becausethatisthe.NETnamespaceituses.
After 
decrypting 
the 
resource, 
it 
is 
linked 
into 
the 
process 
using 
System.Reflection.Assembly.Load(byte[]). 
This 
method 
is 
documented 
on 
􀀀MSDN 
here. 
Using 
this 
method, 
the 
DLL 
will 
never 
be 
written 
to 
the 
filesystem. 
This 
technique 
could 
have 
been 
chosen 
by 
the� 
developers 
to 
evade 
antivirus 
detection. 



Under 
the 
hood, 
Assembly.Load(), 
uses 
a 
call 
to 
the 
win32 
api 
call 
CreateFileMappingW() 
with 
the 
hFile 
parameter 
set 
to 
INVALID_HANDLE_VALUE. 
According 
to 
MSDN, 
this 
will 
create 
a 
mapped 
file 
that 
is� 
backed 
by 
the 
paging 
filesystem, 
not 
the 
standard 
filesystem. 
A 
layer 
below 
CreateFileMapping, 
the� 
system 
call 
NtCreateSection 
is 
invoked. 



After 
the 
empty 
file 
is 
created, 
it 
is 
mapped 
into 
memory 
using 
the 
Win32 
API 
call 
MapViewOfFileEx.� 
The 
layer 
below 
this 
invokes 
the 
system 
call 
NtMapViewOfSection. 



Now, 
a 
call 
to 
memcpy() 
is 
used 
to 
copy 
the 
decrypted 
DLL 
into 
the 
newly 
allocated 
address 
range. 



UnpackingSettingsandNanoCoreThesettingsfor"Benchmark"andtheNanoCoreexecutableareserialized,DESencrypted,spliced,
andstoredacrossmultiplePNGfilesaspixeldata.ThePNGfilesareconcatenatedandstoredinthe􀀀􀀀
.NETmanagedresourcesofthemainexecutable.
Someofthesettingsthatcanbeconfiguredare:􀀀
ErusddsdssrrsdNrsssusrIdrrrsrNwdrdrIrdrdrurIdrss
After 
viewing 
one 
of 
these 
images, 
it 
is 
obvious 
they 
are 
not 
used 
to 
conveying 
visual 
information 
to 
a 
human 
eye. 



After 
writing 
a 
short 
python 
script, 
I 
was 
able 
to 
extract 
all 
19 
PNG 
files. 
If 
you 
have 
robot 
eyes, 
you 
can� 
see 
a 
cat. 



Here 
is 
a 
C# 
decompilation 
of 
the 
method 
used 
to 
extract 
the 
information 
out 
of 
the 
pixel 
data. 



Once 
everything 
is 
decrypted, 
the 
set 
options 
are 
executed, 
and 
the 
NanoCore 
RAT 
payload 
is 
injected 
into 
a 
new 
child 
process. 
The 
method 
of 
injection 
is 
discussed 
later. 


Unpacking 
PerfWatson.exe 


Now 
that 
"Benchmark" 
is 
loaded 
into 
memory, 
it 
is 
tasked 
with 
copying 
the 
main 
executable 
and 
extracting 
PerfWatson.exe 
to 
%APPDATA%\\Microsoft\Blend\14.0\FeedCache\. 


PerfWatson.exe 
is 
stored 
inside 
Benchmark 
as 
a 
base64 
encoded 
string. 
There 
is 
no 
encryption 
or 
obfuscation 
outside 
of 
the 
base64 
encoding. 



Inside 
the 
.NET 
assembly, 
the 
string 
is 
stored 
as 
a 
DefaultSettingValue 
string. 
The 
developers 
might 
have 
used 
this 
as 
a 
way 
to 
conceal 
the 
meaning 
of 
this 
long 
string. 



Once 
the 
string 
is 
decoded, 
it 
is 
written 
to 
disk 
and 
executed. 



InjectingthePayloadTheNanoCoreRATpayloadisneverwrittentodisktoavoiddetection.Instead,itisinjectedintoanewprocess.TheinjectionroutinecanbesummarizedbytheseWin32APIandsystemcalls:
rrssEEENrdrsssusddNrdsddEdudEIrsrdrssrdsEIsddrssdNwsruswrsrdd000000ruEsdsrNrrur00000000EHdr0000200000036000rsr0003000rEIsddrssdssddrss000000NrddsEIrsrrdNrsurdussdrsssusdddrurssssusdd
N 
rd 
sr 
dr 
dr 
ss 



rrdddrssEswwdsrd
ddrssrrdswd

d 
wsr 
sNr 
ru 
r 
du 
d 


E 



I 
s 
ddr 
ss 
N 
rd 


s 



d 
ud 
EI 
r 
srs 



u 




ussrdwNrsurd
du 
rss 
d 


sw 
s 
drss 
sus 
N 
r 

For 
more 
information 
on 
how 
SentinelOne 
protects 
against 
attacks 
such 
as 
these, 
visit 
our 
resources 
page 
at 
sentinelone.com/resources 



r2016ssrdrrssProductsSupportPartnersResourcesBlogEventsCompany

