Blog 
Home 
(https://researchcenter.paloaltonetworks.com/) 
> 
Unit 
42 
(https://researchcenter.paloaltonetworks.com/unit42/) 
> 
Sofacy Attacks Multiple 
Government 
Entities
Sofacy Attacks Multiple GovernmentEntities 

By Bryan 
Lee 
(https://researchcenter.paloaltonetworks.com/author/bryan-lee/), 
Mike 
Harbison 
(https://researchcenter.paloaltonetworks.com/author/mike-harbison/) 
and 
Robert 
Falcone 
(https://researchcenter.paloaltonetworks.com/author/robert-falcone/) 
February 28, 2018 at 10:00 AM Category: 
Unit 
42 
(https://researchcenter.paloaltonetworks.com/unit42/) 

Tags: 
APT28 
(https://researchcenter.paloaltonetworks.com/tag/apt28/), 
Carberp 
(https://researchcenter.paloaltonetworks.com/tag/carberp/), 
LuckyStrike 
(https://researchcenter.paloaltonetworks.com/tag/luckystrike/), 
Ministry of 
Foreign 
A.airs 
(https://researchcenter.paloaltonetworks.com/tag/ministry-of-foreign-a.airs/), 
Powershell 
(https://researchcenter.paloaltonetworks.com/tag/powershell/), 
Sofacy 
(https://researchcenter.paloaltonetworks.com/tag/sofacy/), 
Trojan 
(https://researchcenter.paloaltonetworks.com/tag/trojan/) 

岡 4,114 放(4) 
(https://twitter.com/home? 
status=https%3A%2F%2Fresearchcenter.paloaltonetworks.com%2F2018%2F02%2Funit42-
sofacy-attacks-multiple-government-entities%2F+Sofacy+Attacks+Multiple+Government+Entities) 

旺 
(https://www.facebook.com/sharer/sharer.php? 
u=https%3A%2F%2Fresearchcenter.paloaltonetworks.com%2F2018%2F02%2Funit42-sofacy-
attacks-multiple-government-entities%2F) 
於 
(https://www.linkedin.com/shareArticle? 
mini=true&url=https%3A%2F%2Fresearchcenter.paloaltonetworks.com%2F2018%2F02%2Funit42-
sofacy-attacks-multiple-government-
entities%2F&title=Sofacy+Attacks+Multiple+Government+Entities&summary=&source=) 
(//www.reddit.com/submit) 
The Sofacy group (AKA APT28, Fancy Bear, STRONTIUM, Sednit, Tsar Team, Pawn Storm) is a well-known adversary that remains highly active in the new calendar year of 2018. Unit 42 actively monitorsthis group due to their persistent nature globally across all industry verticals. Recently, we discovered acampaign launched at various Ministries of Foreign A.airs around the world. Interestingly, there appear tobe two parallel e.orts within the campaign, with each e.ort using a completely di.erent toolset for theattacks. In this blog, we will discuss one of the e.orts which leveraged tools that have been known to beassociated with the Sofacy group. 
Attack Details 
At the beginning of February 2018, we discovered an attack targeting two government institutions relatedto foreign a.airs. These entities are not regionally congruent, and the only shared victimology involvestheir organizational functions. Speci.cally, one organization is geographically located in Europe and theother in North America. The initial attack vector leveraged a phishing email (seen in Figure 1), using thesubject line of Upcoming Defense events February 2018 and a sender address claiming to be from Jane＊s360 defense events <events@ihsmarkit.com>. Jane＊s 
(http://www.janes.com/) 
by IHSMarkit 
is a 
well-known supplier of information and analysis often times associated with the defense and government sector. Analysis of the email header data showed that the sender address was spoofed and did notoriginate from IHSMarkit at all. The lure text in the phishing email claims the attachment is a calendar ofevents relevant to the targeted organizations and contained speci.c instructions regarding the actions thevictim would have to take if they had ※trouble viewing the document§. 

Figure 1 Spear-phishing email used in the attack campaign 
The attachment itself is an Microsoft Excel XLS document that contains malicious macro script. The document presents itself as a standard macro document but has all of its text hidden until the victimenables macros. Notably, all of the content text is accessible to the victim even before macros areenabled. However, a white font color is applied to the text to make it appear that the victim must enablemacros to access the content. Once the macro is enabled, the content is presented via the following code: 
ActiveSheet.Range(※a1:c54§).Font.Color.=.vbBlack 
The code above changes the font color to black within the speci.ed cell range and presents the contentto the user. On initial inspection, the content appears to be the expected legitimate content, however,closer examination of the document shows several abnormal artifacts that would not exist in a legitimatedocument. Figure 2 below shows how the delivery document initially looks and the transformation thecontent undergoes as the macro runs. 

Figure 2 Delivery document before and after the macro is run 

Delivery Document 
As mentioned 
in 
a 
recent 
ISC 
diary 
entry(https://isc.sans.edu/forums/diary/Simple+but+E.ective+Malicious+XLS+Sheet/23305/), 
the 
macro 
getsthe contents of cells in column 170 in rows 2227 to 2248 to obtain the base64 encoded payload, whichcan be seen in the following screenshot: 

Figure 3 Delivery Document showing base64 encoded payload 
The macro prepends the string 〞每BEGIN.CERTIFICATE〞每 to the beginning of the base64 encoded payload and appends 〞每END.CERTIFICATE〞每 to the end of the data. The macro then writes this data to a text .le in the C:\Programdata folder using a random .lename with the .txt extension. The macro then uses the command certutil.-decode to decode the contents of this text .le and outputs the decoded content to a randomly named .le with a .exe extension in the C:\Programdata folder. The macro sleeps for two seconds and then executes the newly dropped executable. 
The newly dropped executable is a loader Trojan responsible for installing and running the payload of thisattack. We performed a more detailed analysis on this loader Trojan, which readers can view in thisreport＊s appendix. 
Upon execution, the loader will decrypt the embedded payload (DLL) using a customalgorithm, decompress it and save it to the following .le: 
%LOCALAPPDATA%\cdnver.dll 
The loader will then create the batch .le %LOCALAPPDATA%\cdnver.bat, which it will write the following: 
start.rundll32.exe.※C:\Users\user\AppData\Local\cdnver.dll§,#1 
The loader Trojan uses this batch .le to run the embedded DLL payload. For persistence, the loader willwrite the path to this batch .le to the following registry key, which will run the batch .le each time the userlogs into the system: 
HKCU\Environment\UserInitMprLogonScript 
The 
cdnver.dll 
payload 
installed 
by the 
loader 
executable 
is a 
variant 
of 
the 
SofacyCarberp 
(https://researchcenter.paloaltonetworks.com/tag/carberp/) 
payload, 
which 
is used 
extensively by theSofacy threat group. Overall, SofacyCarberp does initial reconnaissance by gathering system information 
and sending it to the C2 server prior to downloading additional tools to the system. This variant of SofacyCarberp was con.gured to use the following domain as its C2 server: 
cdnverify[.]net 
The loader and the SofacyCarberp sample delivered in this attack is similar to samples we have analyzedin the past but contains marked di.erences. These di.erences include a new hashing algorithm to resolveAPI functions and to .nd running browser processes for injection, as well as changes to the C2communication mechanisms as explained in detail within the appendix. 

Open-source Delivery Document Generator 
It 
appears that 
Sofacy may have 
used 
an 
open-source 
tool 
called 
Luckystrike(https://github.com/curi0usJack/luckystrike) 
to 
generate 
the 
delivery document 
and/or 
the 
macro 
used 
inthis attack. 
Luckystrike, 
which 
was presented 
at 
DerbyCon 
6 
in 
September 
2016(https://www.shellntel.com/blog/2016/9/13/luckystrike-a-database-backed-evil-macro-generator), 
is aMicrosoft PowerShell-based tool that generates malicious delivery documents by allowing a user to add amacro to an Excel or Word document to execute an embedded payload. We believe Sofacy used this tool,as the macro within their delivery document closely resembles the macros found within Luckystrike. 
To con.rm our suspicions, we generated a malicious Excel .le with Luckystrike and compared its macroto the macro found within Sofacy＊s delivery document. We found that there was only one di.erencebetween the macros besides the random function name and random cell values that the Luckystrike toolgenerates for each created payload. The one non-random string di.erence was the path to the ※.txt§ and ※.exe§ .les within the command ※certutil -decode§, as the Sofacy document used ※C:.Programdata.§ for the path whereas the Luckystrike document used the path stored in the Application.UserLibraryPathenvironment variable. Figure 3 below shows a di. with the LuckyStrike macro on the left and Sofacymacro on the right, where everything except the .le path and randomly generated values in the macro areexactly the same, including the obfuscation attempts that use concatenation to build strings. 
(https://researchcenter.paloaltonetworks.com/wp-content/uploads/2018/02/luckystrike_di..png) 
Figure 4 Di. of macros in Luckystrike generated document (left) and Sofacy＊s delivery document (right) 

Discovery and relationships 
With much of our research, our initial direction and discovery of emerging threats is generally somecombination of previously observed behavioral rulesets or relationships. In this case, we had observed astrange pattern emerging from the Sofacy group over the past year within their command and controlinfrastructure. Patterning such as reuse of WHOIS artifacts, IP reuse, or even domain name themes arecommon and regularly used to group attacks to speci.c campaigns. In this case, we had observed the Sofacy group registering new domains, then placing a default landing page which they then usedrepeatedly over the course of the year. No other parts of the C2 infrastructure amongst these domainscontained any overlapping artifacts. Instead, the actual content within the body of the websites was anexact match in each instance. Speci.cally, the strings 866-593-54352 (notice it is one digit too long), 403-965-2341, or the address 522.Clematis..Suite.3000 was repeatedly found in each instance. ThreatConnect 
(https://www.threatconnect.com/blog/track-to-the-future/) 
had 
made 
the 
sameobservation regarding this patterning in September 2017. 

Figure 5 Default landing page for cdnverify.net domain 

Figure 6 Default landing page for hot.xmsupload.com domain 
Hotfixmsupload[.]com is particularly interesting as it has been identi.ed as a Sofacy C2 domain repeatedly, and was also brought forth by Microsoft in a legal complaint against STRONTIUM (Sofacy) asdocumented 
here 
(https://noticeofpleadings.com/strontium/). 

Leveraging this intelligence allowed us to begin predicting potential C2 domains that would eventually beused by the Sofacy group. In this scenario, the domain cdnverify[.]net was registered on January 30, 2018 and just two days later, an attack was launched using this domain as a C2. 

Conclusion 
The Sofacy group should no longer be an unfamiliar threat at this stage. They have been well documented and well researched with much of their attack methodologies exposed. They continue to be persistent intheir attack campaigns and continue to use similar tooling as in the past. This leads us to believe that their attack attempts are likely still succeeding, even with the wealth of threat intelligence available in the publicdomain. Application of the data remains challenging, and so to continue our initiative of establishingplaybooks for 
adversary groups, 
we 
have 
added 
this attack 
campaign 
as the 
next 
playbook 
(https://pan-
unit42.github.io/playbook_viewer/) 
in 
our 
dataset. 

Palo Alto Networks customers are protected from this threat by: 
1. 
WildFire detects all SofacyCarberp payloads with malicious verdicts. 

2. 
AutoFocus customers can 
track 
these 
tools with 
the 
Sofacy 
(https://autofocus.paloaltonetworks.com/#/tag/Unit42.Sofacy), 
SofacyMacro 
(https://autofocus.paloaltonetworks.com/#/tag/Unit42.SofacyMacroDoc) 
and 
SofacyCarberp 
(https://autofocus.paloaltonetworks.com/#/tag/Unit42.SofacyCarberp) 


3. 
Traps blocks the Sofacy delivery documents and the SofacyCarberp payload. 



IOCs 
SHA256 
.808d0a12676bfac88fd26f955154f8884f2bb7c534b9936510fd6296c543e8 
12e6642cf6413bdf5388bee663080fa299591b2ba023d069286f3be9647547c8 
cb85072e6ca66a29cb0b73659a0fe5ba2456d9ba0b52e3a4c89e86549bc6e2c7 
23411bb30042c9357ac4928dc6fca6955390361e660fec7ac238bbdcc8b83701 
Domains 
Cdnverify[.]net 
Email Subject 
Upcoming Defense events February 2018 
Filename 
Upcoming Events February 2018.xls 
Appendix 
Loader Trojan 
The payload dropped to the system by the macro is an executable that is responsible for installing andexecuting a dynamic link library (DLL) to the system. This executable contains the same decryptionalgorithm 
as 
the 
loader 
we 
analyzed 
in 
the 
DealersChoice 
attacks in 
late 
2016(https://researchcenter.paloaltonetworks.com/2016/10/unit42-dealerschoice-sofacys-.ash-player-exploit-
platform/). 

The loader has several coding features that make it interesting. For example, upon execution, the loader attempts to load the following library: api-ms-win-core-synch-l1-2-0.dll. This DLL is part of the Universal Windows Platform app to Windows 10. Typically, a developer would not link directly to this .le, but to WindowsApp.lib, which gives access to the underlying APIs. It appears the loader included de.nitions of wrappers for Windows API functions that cannot be called directly because they are notsupported on all operating systems. 
Upon execution, the loader will decrypt the embedded payload (DLL) using a custom algorithm followedby decompressing it using the RtlDecompressBuffer API. This API is normally used for Windows drivers, but there is nothing to prevent a userland process from using it, and the parameters aredocumented 
(https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-
rtldecompressbu.er) 
on 
MSDN. 
The 
compression 
algorithm 
used 
is LZNT1 
with 
maximum 
compression 
level. The payload is decrypted using a starting 10-byte XOR key of: 0x3950BE2CD37B2C7CCBF8. Once decrypted, the data is then passed to the decompression routine. The payload is in the loader at .le o.set:.0x19880.每.0x1F23C size of 0x59BD. The payload can be decrypted and decompressed with the following Python script: 
1 import ctypes
2 nt = ctypes.windll.ntdll 
3 
4 def decompress_buffer(data): 
5 final_size = ctypes.c_ulong(0)6 uncompressed =ctypes.c_buffer(0x7c00)7 nt.RtlDecompressBuffer(0x102,uncompressed,0x7C00,ctypes.c_char_p(data),0x59BD,ctypes.byref(fi 8 return uncompressed.raw 
9 
10 def main(): 
11 Startkey="3950BE2CD37B2C7CCBF8".decode('hex')
12 with open("C:\\temp\\carvedDLL.dat","rb") as fp: 
13 Payload=fp.read() 14 decrpted=[] 15 Count=0 16 for i in Payload: 17 InnerCount=0 18 key=ord(i)
19 for x in range(0,len(Startkey)): 
20 result = (ord(Startkey[x]) + Count * InnerCount) & 0xFF 21 InnerCount+=1 22 key ^= result 23 Count+=1 24 decrpted.append(key)25 decompressed=decompress_buffer(str(bytearray(decrpted))) 
26 with open("C:\\temp\\CarvedDLL_decrypted.dat","wb") as wp: 27 wp.write(bytearray(decompressed)) 28 print "Finished" 29 if __name__ == '__main__': 
30 main() 
The loader will drop the following .les in the %LOCALAPPDATA% .le path: 

Cdnver.dll Cdnver.bat 

To evade observable detection from Windows explorer, .le attributes are set to hidden. %LOCALAPPDATA% would be the user＊s path from the user who launched the executable, i.e., C:\Users\user\AppData\Local where the user would contain the user＊s logon account. 
To execute the dropped DLL, the loader .rst checks the integrity level of the executing process, and if itdoes not have the necessary permissions, the loader will enumerate the system＊s processes searching for explorer.exe. This process was most likely chosen as it typically runs with administrator privileges. 
The loader will attempt to use the permission of explorer.exe to execute the dropped DLL via CreateProcessAsUser. If the user who executed the loader is admin or has su.cient privileges this step is skipped. The execution is handled using the Windows rundll32.exe program and calls the DLL＊s export via ordinal number 1. Example: 
start.rundll32.exe.※C:\Users\user\AppData\Local\cdnver.dll§,#1.
For persistence, the loader will add the following registry key UserInitMprLogonScript to HKCU \Environment with the following value: 
C:\Users\user\AppData\Local\cdnver.bat 
This entry would cause the batch .le to be executed any time the user logs on. The batch .le contains the following information: 
start.rundll32.exe.※C:\Users\user\AppData\Local\cdnver.dll§,#1.
The 
use 
of 
the 
UserInitMprLogonScript 
is not 
new 
to 
Sofacy, 
as 
Mitre＊s ATT&CK 
framework 
(https://attack.mitre.org/wiki/Technique/T1037) 
shows Sofacy＊s use 
of 
this registry key as an 
example 
ofthe 
Logon 
Scripts 
(https://attack.mitre.org/wiki/Technique/T1037) 
persistence 
technique. 



SofacyCarberp Payload 
The DLL delivered in these attacks is a variant of the SofacyCarberp payload, which is used extensively bythe Sofacy threat group. 

API Resolution 
Previous versions of this Trojan used code taken from the leaked Carberp source code, which mainlyinvolved Carberp＊s code used to resolve API functions. However, this version of SofacyCarberp uses ahashing algorithm to locate the correct loaded DLL based on its BaseDLLName in order to manually load API functions. It does so by loading the PEB, then accesses the _PEB_LDR_DATA structure and then obtains the unicode string for BaseDllName in the InLoadOrderModuleList. It treats this unicode string as an ASCII string by skipping every other byte then gets the lowercase version of the string. It then subjects the resulting string of lowercase characters to a hashing algorithm and checks the resulting hashto a hardcoded value. The following Python script shows the algorithm used to determine the hashed values: 
1 l = ["kernel32.dll","ntdll.dll"]
2 for lib in l: 
3 seed = 0 4 for e in lib: 5 c = ord(e)
6 if ord(e)-0x41 <= 25 and ord(e)-0x41 > 0: 
7 c = ord(e)+32 
8 seed = (c + 0x19660D * seed + 0x3C6EF35F )& 0xFFFFFFFF 9 
10 print "%s is 0x%x" % (lib,seed) 
The following is a list of hardcoded values used to .nd the correct loaded DLL: 

0x98853A78 每 kernel32.dll 

0xA4137E37 每 ntdll.dll 
It speci.cally looks for the following APIs based on its hash: 

0x77b826b3 
每 ? (most likely ntdll.ZwProtectVirtualMemory based on code context) 


0x2e33c8ac 
每 ntdll.ZwWriteVirtualMemory 


0xb9016a44 
每 ntdll.ZwFreeVirtualMemory 


0xa2ea8afa 
每 ntdll.ZwQuerySystemInformation 


0x99885504 
每 ntdll.ZwClose 


0x46264019 
每 ntdll.ZwOpenProcess 0x3B66D24C 每 kernel32.? 0x79F5D836 每 kernel32.? 





Injecting into Browsers 
The Trojan will use the same hashing algorithm for API resolution to .nd browser processes running on thesystem with the intention of injecting code into the browser to communicate with its C2 server. The use of this hashing 
algorithm 
di.ers from 
previous variants of 
SofacyCarberp, 
as previously reported 
by ESET(https://www.welivesecurity.com/wp-content/uploads/2016/10/eset-sednit-part1.pdf). 

To begin the code injection, the Trojan calls the ZwQuerySystemInformation function, speci.cally requesting for the data associated with SystemProcessInformation. The result is a structure named SYSTEM_PROCESS_INFORMATION, which the Trojan will access the Unicode string in the .eld ImageName.(offset.0x3c). The Trojan then subjects this unicode string in ASCII format to the hashing algorithm, looking for the following: 

0xCDCB4E50 
每 iexplore.exe 


0x70297938 
每 .refox.exe 


0x723F0158 
每 chrome.exe 


The Trojan will attempt to inject code into these browsers to carry out its C2 communications. To carry outC2 communications via injected code in a remote process, the injected code reaches out to the C2 serverand saves the response to a memory mapped .le named SNFIRNW. The Trojan uses a custom communication protocol within this mapped .le, but at a high level the Trojan will continually look for datawithin the mapped SNFIRNW .le and process the data in the same manner as if it communicated with the C2 server within its own process. 

Command and Control Communications 
In addition to being able to communicate with its C2 server from code injected into a web browser, theTrojan can also carry out the same communication process within its own process. The C2communication uses HTTPS and speci.cally sets the following .ags to do so in a manner to allow invalidcerti.cates: 
SECURITY_FLAG_IGNORE_CERT_DATE_INVALID|SECURITY_FLAG_IGNORE_CERT_CN_INVALID|SECURITY_FLAG_IGNORE_UNKNOWN_CA|SECURITY_FLAG_IGNORE_REVOCATION 
The initial request sent from the Trojan is to google.com, likely as an internet connectivity check. 

Figure 7 Initial request from SofacyCarberp Trojan to Google to check for Internet access 
As seen in the activity above, the Trojan issues a POST request to a URL that contains randomly sized andrandomly generated strings. The URL also contains a randomly chosen string from the following list: 

vnd.wmc 

.3gpp2 .ktx 
.rfc822 
.vnd..atland.3dml 
.report 
.vnd.radisys.msml-basic-layout 
.3gpp 
This list of strings di.ers from previously analyzed SofacyCarberp samples, such as the variant discussedin 
our 
June 
2016 
blog 
※New 
Sofacy Attacks Against 
US 
Government 
Agency(https://researchcenter.paloaltonetworks.com/2016/06/unit42-new-sofacy-attacks-against-us-
government-agency/)※ 
that 
chose 
from 
a 
list 
of 
strings .xml, 
.pdf, 
.htm 
or 
.zip. 

The value for the one parameter, speci.cally WrLqG1kMJXpgID1rODM= is base64 encoded ciphertext that decrypts to the string UihklEpz4V, which is hardcoded in the Trojan. The algorithm used to encrypt the data 
in 
the 
URL 
the 
same 
algorithm 
as used 
in 
previous SofacyCarberp 
samples(https://researchcenter.paloaltonetworks.com/2016/06/unit42-new-sofacy-attacks-against-us-
government-agency/) 
we 
have 
analyzed 
(https://researchcenter.paloaltonetworks.com/2016/10/unit42-
dealerschoice-sofacys-.ash-player-exploit-platform). 
The 
data 
in 
the 
POST 
request 
is the 
base64 
encoded user-agent seen in the request. 
After establishing that the system has Internet access, the Trojan will gather detailed system informationand send it to the C2 server. The gathered information includes a unique identi.er based on the storagevolume serial number (id .eld), a list of running processes, network interface card information, the storagedevice name (disk .eld), the Trojan＊s build identi.er (build .eld, speci.cally 0x9104f000), followed by ascreenshot of the system (img .eld). The screenshot functionality in this Trojan is rather interesting, asinstead of using Windows APIs to take a screenshot, the Trojan＊s code simulates the user pressing the※Take Screenshot§ key (VK_SCREENSHOT) on the keyboard which saves the screenshot to the clipboard. The Trojan then accesses the data in the clipboard and converts it to a JPG image to include in this HTTP request. All of this data is encrypted, base64 encoded and sent to the C2 server in a HTTP POST to aURL that a similar structure as the initial internet connectivity check. 

Figure 8 HTTP POST from SofacyCarberp to C2 server with system information 
The SofacyCarberp Trojan parses the C2 server＊s response to the request for data that the Trojan will thenuse to download a secondary payload to the system. The Trojan looks in the response data for sections between the tags [file] and [/file] and [settings] and [/settings], which we have observed in other SofacyCarberp samples we have analyzed. However, this particular variant also contains another section with the tags [shell] and [/shell]. The Trojan parses these sections for speci.c .elds that dictate how the Trojan will operate, including where the Trojan will save the downloaded .le, how theTrojan runs the secondary payload and what C2 location the Trojan should communicate with. The following .elds are parsed by the Trojan: 

FileName: Speci.ed .lename 
PathToSave: Path to speci.ed .le 
Execute: Create a process with the speci.ed .le 

Delete: Delete the speci.ed .le 

LoadLib: Load the speci.ed DLL into the current process 

ReadFile: Reads a speci.ed the .le 

Rundll: Runs the speci.ed DLL with a speci.ed exported function 

IP: Set C2 location 

shell: Run additional code in a newly created thread 
The data in the shell section speci.ed in the shell .eld is base64 encoded data that decodes to raw assembly. We surmise this fact based on the Trojan using the base64 decoded data to create a localthread, which suggests that the provided data can be any position independent code or shellcode. 
Got something to say? 
Leave a comment... 


Notify me of followup comments via e-mail 
Name (required) 
Email (required) 
Website 
SUBMIT 
SUBSCRIBE TO NEWSLETTERS 


COMPANY 
Company 
(https://www.paloaltonetworks.com/company) 
Careers 
(https://www.paloaltonetworks.com/company/careers) 
Sitemap 
(https://www.paloaltonetworks.com/sitemap) 
Report 
a 
Vulnerability 
(https://www.paloaltonetworks.com/security-disclosure) 


LEGAL NOTICES 
Privacy Policy 
(https://www.paloaltonetworks.com/legal-notices/privacy) 
Terms of 
Use 
(https://www.paloaltonetworks.com/legal-notices/terms-of-use) 


ACCOUNT 
Manage 
Subscription 
(https://www.paloaltonetworks.com/company/subscriptions) 

.(https://www.linkedin.com/company/palo-alto-networks) 
.(https://www.facebook.com/PaloAltoNetworks/) 
.(https://twitter.com/PaloAltoNtwks) 

(https://ignite.paloaltonetworks.com/usa/? 
CampaignId=7010g000001IH8U&utm_content=Ignite18USA&utm_medium=390x90banner&utm_source=website) . 2016 Palo Alto Networks, Inc. All rights reserved. 





