in the footsteps of HackingTeam 
By Nikita 
Buchka, Alexey 
Firsh 
on January 16, 2018. 10:00 am 
At the beginning of October 2017, we discovered new Android spyware with several features previously unseen in the wild. In the course of further research, we found a number of related samples that point to a long-term development process. We believe the initial versions of this malware were created at least three years ago 每 at the end of 2014. Since then, the implant＊s functionality has been improving and remarkable new features implemented, such as the ability to record audio surroundings via the microphone when an infected device is in a speci.ed location; the stealing of WhatsApp messages via Accessibility Services; and the ability to connect an infected device to Wi-Fi networks controlled by cybercriminals. 
We observed many web landing pages that mimic the sites of mobile operators and which are used to spread the Android implants. These domains have been registered by the attackers since 2015. According to our telemetry, that was the year the distribution campaign was at its most active. The activities continue: the most recently observed domain was registered on October 31, 2017. Based on our KSN statistics, there are several infected individuals, exclusively in Italy. 
Moreover, as we dived deeper into the investigation, we discovered several spyware tools for Windows that form an implant for ex.ltrating sensitive data on a targeted machine. The version we found was built at the beginning of 2017, and at the moment we are not sure whether this implant has been used in the wild. 
We named the malware Skygofree, because we found the word in one of the domains*. 
Malware Features Android 
According to the observed samples and their signatures, early versions of this Android malware were developed by the end of 2014 and the 
campaign has remained active ever since. 
Signature of one of the earliest versions 
The code and functionality have changed numerous times; from simple unobfuscated malware at the beginning to sophisticated multi-stage spyware that gives attackers full remote control of the infected device. We have examined all the detected versions, including the latest one that is signed by a certi.cate valid from September 14, 2017. 
The implant provides the ability to grab a lot of ex.ltrated data, like call records, text messages, geolocation, surrounding audio, calendar events, and other memory information stored on the device. 
After manual launch, it shows a fake welcome noti.cation to the user: 
Dear Customer, we＊re updating your con.guration and it will be ready as soon as possible. 
At the same time, it hides an icon and starts background services to hide further actions from the user. 
Service Name  Purpose  
AndroidAlarmManager  Uploading last recorded .amr audio  
AndroidSystemService  Audio recording  
AndroidSystemQueues  Location tracking with movement detection  
ClearSystems  GSM tracking (CID, LAC, PSC)  
ClipService  Clipboard stealing  
AndroidFileManager  Uploading all ex.ltrated data  
AndroidPush  XMPP 妊&C protocol  
(url.plus:5223)  
RegistrationService  Registration on C&C via HTTP (url.plus/app/pro/)  

Interestingly, a self-protection feature was implemented in almost every service. Since in Android 8.0 (SDK API 26) the system is able to kill idle services, this code raises a fake update noti.cation to prevent it: Cybercriminals have the ability to control the implant via HTTP, XMPP, binary SMS and FirebaseCloudMessaging 
(or GoogleCloudMessaging in older versions) protocols. Such a diversity of protocols gives the attackers more .exible control. In the latest implant versions there are 48 di.erent commands. You can .nd a full list with short descriptions in the Appendix. Here are some of the most notable: 

＆geofence＊ 每 this command adds a speci.ed location to the implant＊s internal database and when it matches a device＊s current location the malware triggers and begins to record surrounding audio. 

§social§ 每 this command that starts the ＆AndroidMDMSupport＊ service 
每 this allows the .les of any other installed application to be grabbed. The service name makes it clear that by applications the attackers mean MDM solutions that are business-speci.c tools. The operator can specify a path with the database of any targeted application and server-side PHP script name for uploading. 
Several hardcoded applications targeted by the MDM-grabbing command 

＆wi.＊ 每 this command creates a new Wi-Fi connection with speci.ed con.gurations from the command and enable Wi-Fi if it is disabled. So, when a device connects to the established network, this process will be in silent and automatic mode. This command is used to connect the victim to a Wi-Fi network controlled by the cybercriminals to perform tra.c sni.ng and man-in-the-middle (MitM) attacks. 
addWi.Con.g method code fragments 

＆camera＊ 每 this command records a video/capture a photo using the front-facing camera when someone next unlocks the device. 
Some versions of the Skygofree feature the self-protection ability exclusively for Huawei devices. There is a ＆protected apps＊ list in this brand＊s smartphones, related to a battery-saving concept. Apps not selected as protected apps stop working once the screen is o. and await re-activation, so the implant is able to determine that it is running on a Huawei device and add itself to this list. Due to this feature, it is clear that the developers paid special attention to the work of the implant on Huawei devices. 
Also, we found a debug version of the implant (70a937b2504b3ad6c623581424c7e53d) that contains interesting constants, including the version of the spyware. 
Debug BuildCon.g with the version 
After a deep analysis of all discovered versions of Skygofree, we made an approximate timeline of the implant＊s evolution. 
Mobile implant evolution timeline 
However, some facts indicate that the APK samples from stage two can also be used separately as the .rst step of the infection. Below is a list of the payloads used by the Skygofree implant in the second and third stages. 
Reverse shell payload 
The reverse shell module is an external ELF .le compiled by the attackers to run on Android. The choice of a particular payload is determined by the implant＊s version, and it can be downloaded from the command and control (C&C) server soon after the implant starts, or after a speci.c command. In the most recent case, the choice of the payload zip .le depends on the device process architecture. For now, we observe only one payload version for following the ARM CPUs: arm64-v8a, armeabi, armeabi-v7a. 
Note that in almost all cases, this payload .le, contained in zip archives, is named ＆setting＊ or ＆setting.o＊. 
The main purpose of this module is providing reverse shell features on the device by connecting with the C&C server＊s socket. 
Reverse shell payload 
The payload is started by the main module with a speci.ed host and port as a parameter that is hardcoded to ＆54.67.109.199＊ and ＆30010＊ in some versions: 
Alternatively, they could be hardcoded directly into the payload code: 
We also observed variants that were equipped with similar reverse shell payloads directly in the main APK /lib/ path. 
Equipped reverse shell payload with speci.c string 
After an in-depth look, we found that some versions of the reverse shell payload code share similarities with PRISM 每 a stealth reverse shell backdoor that is available on Github. 
Reverse shell payload from update_dev.zip 

Exploit payload 
At the same time, we found an important payload binary that is trying to exploit several known vulnerabilities and escalate privileges. According to several timestamps, this payload is used by implant versions created since 2016. It can also be downloaded by a speci.c command. The exploit payload contains following .le components: 
Component name Description 
run_root_shell/arrs_put_user.o/arrs_put_user/poc Exploit ELF Sqlite3 tool 
db ELF 
device.db 
Sqlite3 database with supported devices and their constants needed for privilege escalation 
＆device.db＊ is a database used by the exploit. It contains two tables 每 ＆supported_devices＊ and ＆device_address＊. The .rst table contains 205 devices with some Linux properties; the second contains the speci.c memory addresses associated with them that are needed for successful exploitation. You can .nd a full list of targeted models in the Appendix. 
Fragment of the database with targeted devices and speci.c memory addresses 
If the infected device is not listed in this database, the exploit tries to discover these addresses programmatically. 
After downloading and unpacking, the main module executes the exploit binary .le. Once executed, the module attempts to get root privileges on the device by exploiting the following vulnerabilities: 
CVE-2013-2094 CVE-2013-2595 CVE-2013-6282 CVE-2014-3153 (futex aka TowelRoot) CVE-2015-3636 
Exploitation process 
After an in-depth look, we found that the exploit payload code shares several similarities with the public project android-rooting-tools. 

Decompiled exploit function code fragment 
run_with_mmap function from the android-rooting-tools project 
As can be seen from the comparison, there are similar strings and also a unique comment in Italian, so it looks like the attackers created this exploit payload based on android-rooting-tools project source code. 

Busybox payload 
Busybox is public software that provides several Linux tools in a single ELF .le. In earlier versions, it operated with shell commands like this: 
StealingWhatsAppencryptionkeywithBusybox
Social payload 
Actually, this is not a standalone payload .le 每 in all the observed versions its code was compiled with exploit payload in one .le (＆poc_perm＊, ＆arrs_put_user＊, ＆arrs_put_user.o＊). This is due to the fact that the implant needs to escalate privileges before performing social payload actions. This payload is also used by the earlier versions of the implant. It has similar functionality to the ＆AndroidMDMSupport＊ command from the current versions 每 stealing data belonging to other installed applications. The payload will execute shell code to steal data from various applications. The example below steals Facebook data: 
All the other hardcoded applications targeted by the payload: 
Package name Name 
jp.naver.line.android  LINE: Free Calls & Messages  
com.facebook.orca  Facebook messenger  
com.facebook.katana  Facebook  
com.whatsapp  WhatsApp  
com.viber.voip  Viber  


Parser payload 
Upon receiving a speci.c command, the implant can download a special payload to grab sensitive information from external applications. The case where we observed this involved WhatsApp. 
In the examined version, it was downloaded from: 
hxxp://url[.]plus/Updates/tt/parser.apk 
The payload can be a .dex or .apk .le which is a Java-compiled Android executable. After downloading, it will be loaded by the main module via DexClassLoader api: 
As mentioned, we observed a payload that exclusively targets the WhatsApp messenger and it does so in an original way. The payload uses the Android Accessibility Service to get information directly from the displayed elements on the screen, so it waits for the targeted application to be launched and then parses all nodes to .nd text messages: Note that the implant needs special permission to use the Accessibility Service API, but there is a command that performs a request with a phishing text displayed to the user to obtain such permission. 

Windows 
We have found multiple components that form an entire spyware system for the Windows platform. 
Name  MD5  Purpose  
Main  
msconf.exe  55fb01048b6287eadcbd9a0f86d21adf  module,  
reverse shell  
Sending  
network.exe  f673bb1d519138ced7659484c0b66c5b  ex.ltrated  
data  
Surrounding  
sound  
system.exe  d3baa45ed342fbc5a56d974d36d5f73f  recording  
by mic  
update.exe  395f9f87df728134b5e3c1ca4d48e9fa  Keylogging  
Screenshot  
wow.exe  16311b16fd48c1c87c6476a455093e7a  
capturing  
Skype call  
skype_sync2.exe  6bcc3559d7405f25ea403317353d905f  recording to  
MP3  

All modules, except skype_sync2.exe, are written in Python and packed to binary .les via the Py2exe tool. This sort of conversion allows Python code to be run in a Windows environment without pre-installed Python binaries. 
msconf.exe is the main module that provides control of the implant and reverse shell feature. It opens a socket on the victim＊s machine and connects with a server-side component of the implant located at 54.67.109.199:6500. Before connecting with the socket, it creates a malware environment in ＆APPDATA/myupd＊ and creates a sqlite3 database there 每 ＆myupd_tmp\\mng.db＊: 
CREATE TABLE MANAGE(ID INT PRIMARY KEY NOT NULL,Send INT NOT NULL, Keylogg INT NOT NULL,Screenshot INT NOT NULL,Audio INT NOT NULL); INSERT INTO MANAGE (ID,Send,Keylogg,Screenshot,Audio) VALUES (1, 1, 1, 1, 0 ) 
Finally, the malware modi.es the ＆Software\Microsoft\Windows\CurrentVersion\Run＊ registry key to enable autostart of the main module. 
The code contains multiple comments in Italian, here is the most noteworthy example: 
※Receive commands from the remote server, here you can set the key commands to command the virus§ 
Here are the available commands: 
Name  Description  
cd  Change current directory to  
speci.ed  
quit  Close the socket  
Execute received command via  
nggexe  Python＊s subprocess.Popen()  
without outputs  
ngguploads  Upload speci.ed .le to the speci.ed URL  
Download content from the  
nggdownloads  speci.ed URLs and save to speci.ed  
.le  
Dump .le structure of the C: path,  
ngg.lesystem  save it to the .le in json format and  
zip it  

nggstart_screen Enable/disable screenshot module. nggstop_screen When enabled, it makes a screenshot every 25 seconds 
nggstart_key 
Enable/disable keylogging module 
nggstop_key 
nggstart_rec Enable/disable surrounding sounds nggstop_rec recording module 
Send components status to the C&C 
ngg_status 
socket 
Execute received command via Python＊s subprocess.Popen(), output *any other* 
result will be sent to the C&C socket. 
All modules set hidden attributes to their .les: 
Module Paths Ex.ltrated data format 
%Y%m%d-msconf.exe %APPDATA%/myupd/gen/ %H%M%S_.lesystem.zip (.le structure dump) 
%d%m%Y%H%M%S.wav 
system.exe %APPDATA%/myupd/aud/ 
(surrounding sounds) 
%APPDATA%/myupd_tmp/txt/ %Y%m%d-%H%M%S.txt 
update.exe 
%APPDATA%/myupd/txt/ (keylogging) 
%Y%m%d-%H%M%S.jpg 
wow.exe %APPDATA%/myupd/scr/ 
(screenshots) 
yyyyMMddHHmmss_in.mp3 
%APPDATA%/myupd_tmp/skype/ 
skype_sync2.exe yyyyMMddHHmmss_out.mp3 
%APPDATA%/myupd/skype/ 
(skype calls records) 
Moreover, we found one module written in .Net 每 skype_sync2.exe. The main purpose of this module is to ex.ltrate Skype call recordings. Just like the previous modules, it contains multiple strings in Italian. 
After launch, it downloads a codec for MP3 encoding directly from the C&C server: 
http://54.67.109.199/skype_resource/libmp3lame.dll 
The skype_sync2.exe module has a compilation timestamp 每 Feb 06 2017 and the following PDB string: 
\\vmware-host\Shared Folders\dati\Backup\Projects\REcodin_2\REcodin_2\obj\x86\Release\REc odin_2.pdb 
network.exe is a module for submitting all ex.ltrated data to the server. In the observed version of the implant it doesn＊t have an interface to work with the skype_sync2.exe module. 
network.exe submitting to the server code snippet 

Code similarities 
We found some code similarities between the implant for Windows and other public accessible projects. 

https://github.com/El3ct71k/Keylogger/ 
It appears the developers have copied the functional part of the keylogger module from this project. 
update.exe module and Keylogger by ＆El3ct71k＊ code comparison 

Xenotix Python 
Keylogger 
including speci.ed mutex ＆mutex_var_xboz＊. 
update.exe module and Xenotix Python Keylogger code comparison 
＆addStartup＊ method from msconf.exe module 
＆addStartup＊ method from Xenotix Python Keylogger 


Distribution 
We found several landing pages that spread the Android implants. 
Malicious URL  Referrer  Dates  
http://217.194.13.133/tre/i nternet/Con.guratore_3.a pk  http://217.194.13.133/tre/i nternet/  2015-02-04 to present time  
http://217.194.13.133/appP  每  2015-07-01  
ro_AC.apk  
http://217.194.13.133/190/  
con.gurazione/vodafone/  http://217.194.13.133/190/  2015-01-20 to  
smartphone/VODAFONE% 20Con.guratore%20v5_4  con.gurazione/vodafone/ smartphone/index.html  present time  
_2.apk  
http://217.194.13.133/190/ con.gurazione/vodafone/ smartphone/Vodafone%20 Con.guratore.apk  http://217.194.13.133/190/ con.gurazione/vodafone/ smartphone/index.html  currently active  
http://vodafonein.nity.syt es.net/tim/internet/Con.g uratore_TIM.apk  http://vodafonein.nity.syt es.net/tim/internet/  2015-03-04  
http://vodafonein.nity.syt  
es.net/190/con.gurazione  http://vodafonein.nity.syt  
/vodafone/smartphone/V  es.net/190/con.gurazione  2015-01-14  
ODAFONE%20Con.gurato  /vodafone/smartphone/  
re%20v5_4_2.apk  
http://windupdate.serveft  http://windupdate.serveft  2015-03-31  
p.com/wind/LTE/WIND%2  p.com/wind/LTE/  

0Con.guratore%20v5_4_ 2.apk 
http://119.network/lte/Inte  2015-02-04  
rnet-TIM-4G-LTE.apk  http://119.network/lte/do  2015-07-20  
http://119.network/lte/Co  wnload.html  2015-07-08  
n.guratore_TIM.apk  

Many of these domains are outdated, but almost all (except one 每 appPro_AC.apk) samples located on the 217.194.13.133 server are still accessible. All the observed landing pages mimic the mobile operators＊ web pages through their domain name and web page content as well. 
Landing web pages that mimic the Vodafone and Three mobile operator sites 
NETWORK CONFIGURATION ** AGG. 2.3.2015 *** Dear Customer, in order to avoid malfunctions to your internet connection, we encourage you to upgrade your con.guration. Download the update now and keep on navigating at maximum speed! DOWNLOAD NOW Do you doubt how to con.gure your smartphone? Follow the simple steps below and enter the Vodafone Fast Network. Installation Guide Download Click on the DOWNLOAD button you will .nd on this page and download the application on your smartphone. Set your Smartphone Go to Settings-> Security for your device and put a check mark on Unknown Sources (some models are called Sources Unknown). Install Go to noti.cations on your device (or directly in the Downloads folder) and click Vodafone Con.guration Update to install. Try high speed Restart your device and wait for con.rmation sms. Your smartphone is now con.gured. 
Further research of the attacker＊s infrastructure revealed more related mimicking domains. 
Unfortunately, for now we can＊t say in what environment these landing pages were used in the wild, but according to all the information at our dsiposal, we can assume that they are perfect for exploitation using malicious redirects or man-in-the-middle attacks. For example, this could be when the victim＊s device connects to a Wi-Fi access point that is infected or controlled by the attackers. 

Artifacts 
During the research, we found plenty of traces of the developers and those doing the maintaining. 

As already stated in the ＆malware features＊ part, there are multiple giveaways in the code. Here are just some of them: 
ngglobal 每 FirebaseCloudMessaging topic name 
Issuer: CN = negg 每 from several certi.cates 
negg.ddns[.]net, negg1.ddns[.]net, negg2.ddns[.]net 每 
C&C servers 
NG SuperShell 每 string from the reverse shell payload ngg 每 pre.x in commands names of the implant for Windows 
Signature with speci.c issuer 

Whois records and IP relationships provide many interesting insights as well. There are a lot of other ＆Negg＊ mentions in Whois records and references to it. For example: 

Conclusions 
The Skygofree Android implant is one of the most powerful spyware tools that we have ever seen for this platform. As a result of the long-term development process, there are multiple, exceptional capabilities: usage of multiple exploits for gaining root privileges, a complex payload structure, never-before-seen surveillance features such as recording surrounding audio in speci.ed locations. 
Given the many artifacts we discovered in the malware code, as well as infrastructure analysis, we are pretty con.dent that the developer of the Skygofree implants is an Italian IT company that works on surveillance solutions, just like HackingTeam. 
Notes 
*Skygofree has no connection to Sky, Sky Go or any other subsidiary of Sky, and does not a.ect the Sky Go service or app. 
Skygofree 
Appendix 
〞 
Indicators 
of 
Compromise 
(PDF) 

Share post on: 
GOOGLE 
ANDROID 
HACKING 
TEAM 

MOBILE 
MALWARE 


. .. 
Related Posts 
Jack of 
all 
Still 
Stealing 
Kaspersky 
trades 
Security 
Bulletin: 
Review 
of 
the 
Year 
2017 



