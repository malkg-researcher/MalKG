Ramsay: A cyber.espionage toolkit tailored for air.gappednetworks 
welivesecurity.com/2020/05/13/ramsay-cyberespionage-toolkit-airgapped-networks 

Ignacio Sanmillan May 13, 2020 
ESET researchers have discovered a previously unreported cyber-espionage framework that we named Ramsay and that is tailored for collection and ex.ltration of sensitive documents and is capable of operating within air.gapped networks. 
We initially found an instance of Ramsay in VirusTotal. That sample was uploaded from Japan and led us to the discovery of further components and versions of the framework, along with substantial evidence to conclude that this framework is at a developmental stage, with its delivery vectors still undergoing .ne-tuning. 
The current visibility of targets is low; based on ESET¡¯s telemetry, few victims have been discovered to date. We believe this scarcity of victims reinforces the hypothesis that this framework is under an ongoing development process, although the low visibility of victims could also be due to the nature of targeted systems being in air.gapped networks. 
Shared 
artifacts 
were 
found 
alongside 
the 
Retro 
backdoor. 
This malware has been associated with Darkhotel, a notorious APT group known to have conducted cyber-espionage operations since at least 2004, 
having 
targeted 
government 
entities 
in 
China 
and 
Japan 
in 
the 
past. 

Attack vectors 
Along with the discovery of the different instances of Ramsay, we found they were leveraged using a series of attack vectors. These are: 
Figure 1. Overview of discovered Ramsay versions 
Malicious documents dropping Ramsay version 1 
This 
attack 
vector 
consists 
of 
malicious 
documents 
exploiting 
CVE-2017-0199 
intended 
to 
drop 
an 
older 
version of Ramsay. 
This document delivers an initial Visual Basic Script, shown in the screenshot below as Of.ceTemporary.sct, that will extract within the document¡¯s body the Ramsay agent, masquerading as a JPG image by having a base64-encoded PE under a JPG header. 
ID Index OLE Object 
0 0x80c8 Format_id: 2 (Embedded)Class name: ¡®Package¡¯Data size: 8994 OLE Package object:Filename: u¡®Of.ceTemporary.sct¡¯Source path: u¡®C:\\Intel\\Of.ceTemporary.sct¡¯Temp path = u:¡®C\\Intel\\Of.ceTemporary.sct¡¯MD5 = ¡®cf133c06180f130c471c95b3a4ebd7a5¡¯ EXECUTABLE FILE 
1 0xc798 Format_id: 2 (Embedded)Class name: ¡®OLE2Link¡¯ Data size: 2560 MD5 = ¡®daee337d42fba92badbea2a4e085f73f¡¯ CLSID: 00000300-0000-0000-C000-000000000046 StdOleLink (embedded OLE object - known related to CVE-2017-0199, CVE-2017-8570, CVE-2017-8759 or CVE-2018-8174.Possibly an exploit for the OLE2Link vulnerability (VU#921560, CVE-2017-0199) 
Table 1. OLE object layout contained within Ramsay version 1 RTF .le as seen by oletools 
We noticed that the speci.c Ramsay instance dropped by these documents showed low complexity in its implementation and lacked many of the more advanced features seen leveraged by later Ramsay versions. 
Several instances of these same malicious documents were found uploaded to public sandbox engines, labeled as testing artifacts such as ¡®access_test.docx¡¯ or ¡®Test.docx¡¯ denoting an ongoing effort for trial of this speci.c attack vector. 
Based on the low complexity of the Ramsay agent delivered, the threat actors may be embedding this speci.c instance within these malicious documents for evaluation purposes. 


Decoy installer dropping Ramsay version 2.a 
We found one instance uploaded to VirusTotal of Ramsay masquerading as a 7zip installer. 
The reason we named this malware Ramsay was due to some of the strings contained in this binary, such as the following: 
Figure 2. Strings containing ¡°Ramsay¡± 
This version of Ramsay shows a clear re.nement of its evasion and persistence tactics along with the introduction of new features such as a Spreader component and a rootkit; the Spreader component is documented more thoroughly in this part of the Capabilities section. 

Malicious documents dropping Ramsay version 2.b 
This attack vector consists of the delivery of a different malicious document abusing CVE-2017-11882. This document will drop a Ramsay Installer named lmsch.exe as shown in Table 1. 
ID Index OLE Object 
0 0x80c8 Format_id: 2 (Embedded)Class name: ¡®Package¡¯Data size: 644790 OLE Package object:Filename: u¡®lmsch.exe¡¯ Source path: u¡®C:\\fakepath\\lmsch.exe¡¯Temp path = u:¡®C:\\fakepath\\lmsch.exe¡¯MD5 = ¡®27cd5b330a93d891bdcbd08050a5a6e1¡¯ 
1 0xc798 Format_id: 2 (Embedded)Class name: ¡®Equation.3¡¯Data size: 3584 MD5 = ¡®5ae434c951b106d63d79c98b1a95e99d¡¯ CLSID: 0002CE02-0000-0000-C000-000000000046 Microsoft Equation 3.0 (Known related to CVE-2017-11882 or CVE-2018-0802)Possibly an exploit for the Equation Editor vulnerability (VU#421280, CVE-2017-11882) 
Table 2. OLE object layout contained within Ramsay version 2.b RTF .le as seen by oletools 
The Ramsay version leveraged by this document is a slightly modi.ed version of Ramsay version 2.a, with the main difference of not leveraging the spreader component. The functionality of the remaining components is the same in regard to Ramsay version 2.a. 


Client Execution of Infected Files 
As previously mentioned, Ramsay Version 2.a delivers a Spreader component that will behave as a .le infector, changing the structure of benign PE executable .les held within removable and network shared drives in order to embed malicious Ramsay artifacts triggered on host .le execution. 
The Spreader is highly aggressive in its propagation mechanism and any PE executables residing in the targeted drives would be candidates for infection. 
Based on compilation timestamps among the components of the various versions of Ramsay found, we can estimate the following development timeline of this framework: 
Figure 3. Estimation of Ramsay¡¯s development timeline 
The analysis of the different compilation timestamps found across different components implies that this framework has been under development since late 2019, with the possibility of currently having two maintained versions tailored based on the con.guration of different targets. 

Persistence mechanisms 
Based on its version, Ramsay implements various persistence mechanisms of different complexity. Some of these persistence mechanisms are the following: 
AppInit DLL registry key 
The Windows operating system provides the functionality to allow custom DLLs to be loaded into the address space of almost all application processes via AppInit DLL registry key. This technique is not particularly complex; it is implemented in early Ramsay versions and is common in other malware families. 
Scheduled Task via COM API 
Scheduled tasks enable administrators to run tasks or ¡°jobs¡± at designated times rather than every time the system is booted or the user logs in. This feature can be implemented via the Windows COM API, which the .rst versions of Ramsay have tailored. Based 
on 
the 
high 
ratio 
of 
similarity 
with 
Carberp¡¯s 
implementation, it¡¯s highly probable that Ramsay¡¯s implementation was adapted from Carberp¡¯s publicly available source code. 

Phantom DLL Hijacking 
More mature versions of Ramsay denote an increase in complexity of its persistence techniques, which include a technique sometimes referred to as ¡°Phantom DLL Hijacking¡±. 
Phantom DLL Hijacking abuses the fact that many Windows applications use outdated dependencies not strictly necessary for the functionality of the application itself, allowing the possibility of leveraging malicious versions of these dependencies. 
Two services will be targeted in order to enforce this technique. These are: 
WSearch (Windows Search) hijacking msfte.dll: 
Figure 4. Hijacking of Microsoft Search Service msfte.dll 
MSDTC (Microsoft Distributed Transaction Coordinator) service hijacking an oracle dependency seen below as oci.dll: 
Figure 5. Hijacking of MSDTC service dependency oci.dll 
This persistence technique is highly versatile, enabling Ramsay agents delivered as DLLs to fragment their logic into separated sections, implementing different functionality tailored for the subject processes where the agent will be loaded. In addition, the use of this technique makes detection more dif.cult since the loading of these DLLs into their respective processes/services won¡¯t necessarily trigger an alert. 


Capabilities 
Ramsay¡¯s architecture provides a series of capabilities monitored via a logging mechanism intended to assist operators by supplying a feed of actionable intelligence to conduct ex.ltration, control, and lateral movement actions, as well as providing overall behavioral and system statistics of each compromised system. The realization of these actions is possible due to the following capabilities: 

File collection and covert storage 
The primary goal of this framework is to collect all existing Microsoft Word documents within the target¡¯s .lesystem. The overall collection stages are shown in Figure 6: 
Figure 6. Mechanism of document collection 
Word documents will .rst be collected and stored in a preliminary collection directory. The location of this directory may vary depending on the Ramsay version. Two of the directories we observed being used for this purpose were %APPDATA%\Microsoft\UserSetting and %APPDATA%\Microsoft\UserSetting\MediaCache. 
Depending on the Ramsay version, .le collection won¡¯t be restricted to the local system drive, but also will search additional drives such as network or removable drives: 
Figure 7. Hex-Rays output of procedure to scan removable drives for collection 
Figure 8. Hex-Rays output of procedure to scan network drives for collection 
Collected documents are encrypted using the RC4 Stream Cipher Algorithm. 
The RC4 key used to encrypt each .le will be a computed MD5 hash of a randomly generated sequence of 16 bytes, salted with 16 bytes hardcoded in the malware sample. The .rst 16 bytes of the buffer where the encrypted .le will be held will correspond to the actual RC4 key used: 
Figure 9. Hex-Rays output of RC4 key generation and storage 
Collected 
.les 
under 
the 
preliminary 
collection 
directory 
will 
be 
compressed 
using 
a 
WinRAR 
instance 
that Ramsay Installer drops. This compressed archive will be saved within the preliminary collection directory and then generate a Ramsay container artifact: 
Figure 
10. 
Hex-Rays 
output 
of 
Ramsay 
container 
generation 
As shown in the previous screenshot, these Ramsay containers contain a magic value at the beginning of the .le, along with a Hardware Pro.le GUID denoting an identi.er of the victim¡¯s machine; an additional XOR-based encryption layer will be applied to the generated compressed archive. The following diagram shows the structure of these artifacts: Ramsay implements a decentralized way of storing these artifacts among the victim¡¯s .le system by using inline hooks applied on two Windows API functions, WriteFile and CloseHandle. 
Figure 
11. 
Ramsay 
Container 
Structure<{i> 
The hooked WriteFile procedure¡¯s main purpose is to save the .le handle of the subject .le to write and install another hook in the CloseHandle API function. The CloseHandle hooked procedure will then check whether the subject .le name has a .doc extension; if that¡¯s the case, it will then append at the end of the subject document the Ramsay container artifact followed by a stream of 1024 bytes denoting a Microsoft Word document footer. 
This is done as an evasion measure in order to provide a means to hide the embedded artifact within the subject document from the naked eye: 
Figure 
12. 
Hex-Rays 
output 
of 
code 
for 
appending 
Word 
document 
footer 
at 
the 
end 
of 
the 
target 
document 
Ramsay containers appended to Word documents will be marked in order to avoid redundant artifacts being appended to already affected documents and the preliminary storage directory will be cleared in order to generate a brand-new Ramsay artifact in intervals. 
Even though affected documents will be modi.ed, it won¡¯t impact their integrity; each affected Word document remains fully operational after artifact appending has taken place. 
Ex.ltration of these artifacts is done via an external component that we haven¡¯t been able to retrieve. However, based on the decentralized methodology Ramsay implements for storage of collected artifacts, we believe this component would scan the victim¡¯s .le system in search for the Ramsay container¡¯s magic values, in order to identify the location of artifacts to ex.ltrate. 

Command execution 
Unlike most conventional malware, Ramsay does not have a network-based C&C communication protocol nor does any attempt to connect to a remote host for communication purposes. Ramsay¡¯s control protocol follows the same decentralized philosophy implemented for collected artifact storage. 
Ramsay will scan all the network shares and removable drives (excluding A: and B: drives usually reserved for .oppy disks) for potential control .les. First, Ramsay looks for Word documents and also, in more recent versions, for PDFs and ZIP archives: These .les are parsed for the presence of a magic marker speci.c to the control .le format. More speci.cally, Ramsay looks for any of two given encoded Hardware Pro.le GUIDs. One of these GUIDs is hardcoded as shown in Figure 14, while the other is dynamically generated based on the compromised victim¡¯s machine. If any of the subject identi.ers are found, parsing for a command signature will be attempted. 
Figure 
13. 
Hex-Rays 
output 
of 
Ramsay 
Scan 
procedure 
for 
Control 
File 
retrieval 
Figure 
14. 
Hex-Rays 
output 
of 
Ramsay 
Control 
File 
Parsing 
The search for these two GUID instances implies that Ramsay¡¯s control documents can be deliberately crafted to be ¡°victim agnostic¡±, capable of deploying the same control document instance across a number of victims by leveraging a ¡°global¡± GUID within control documents. On the other hand, control documents can be crafted by embedding a speci.c GUID intended to be delivered exclusively on a single victim¡¯s machine. This indicator of Ramsay¡¯s control protocol implementation implies that its backend counterpart may be somewhat automated. 
Ramsay control protocol supports three different commands: 
Signature Command 
Rr*e#R79m3QNU3Sy File Execution 
CNDkS_&pgaU#7Yg9 DLL Load 
2DWcdSqcv3?(XYqT Batch Execution 
Table 3. Ramsay¡¯s control commands 
After a given command signature is retrieved, the contained artifact to execute will be extracted within the control document¡¯s body to then be restored, modifying the subject control document to its original form after command execution. 


Spreading 
Among the different .les dropped by the latest versions of Ramsay we .nd a Spreader component. This executable will attempt to scan for network shares and removable drives excluding A: and B: drives: It is important to notice that there is a correlation between the target drives Ramsay scans for propagation and control document retrieval. This assesses the relationship between Ramsay¡¯s spreading and control capabilities showing how Ramsay¡¯s operators leverage the framework for lateral movement, denoting the likelihood that this framework has been designed to operate within air-gapped networks. 
Figure 
15. 
Hex-Rays 
output 
of 
spreader 
scanning 
routines 
The propagation technique mainly consists of .le infection much like a prepender .le infector in order to generate executables similar in structure to Ramsay¡¯s decoy installers for every accessible PE .le within the aforementioned targeted drives. The following diagram illustrates the changes applied to targeted executables after infection has taken place and how these components interact on execution: 
Figure 
16. 
File 
structure 
changes 
during 
an 
infection 
and 
execution 
All of the different artifacts involved in the infection stage are either within the context of the spreader or dropped previously by another Ramsay component. Some of the artifacts are parsed for the following tokens: 
Figure 
17. 
Hex-Rays 
output 
of 
tokens 
to 
search 
for 
different 
artifacts 
within 
the 
spreader 
context 
After a given .le has been infected, it will be marked by writing a speci.c token at the end of it in order to provide the spreader an identi.er to prevent redundant infection. 
In addition, some components of Ramsay have implemented a network scanner intended for the discovery 
of 
machines 
within 
the 
compromised 
host¡¯s 
subnet 
that 
are 
susceptible 
to 
the 
EternalBlue 
SMBv1 vulnerability. This information will be contained within all logged information Ramsay collects and may be leveraged by operators in order to do further lateral movement over the network in a later stage via a different channel. 

Further remarks 
Ramsay¡¯s version 2.a Spreader component was found to have reused a series of tokens seen before in Darkhotel¡¯s 
Retro 
Backdoor. 
These tokens are the following: 
https://www.welivesecurity.com/2020/05/13/ramsay-cyberespionage-toolkit-airgapped-networks/ 
Figure 
18. 
Hex-Rays 
output 
of 
Token 
Reuse 
with 
Retro 
Figure 
19. 
Token 
Reuse 
on 
Retro 
URL 
Crafting 
Ramsay serializes victims using the GetCurrentHwPro.le API to then retrieve a GUID for the speci.c victim¡¯s machine. This is also seen implemented in Retro. They both use the same default GUID in case the API call fails: 
Figure 
20. 
Ramsay 
and 
Retro 
GUID 
generation 
Both Ramsay and Retro share the same encoding algorithm to encode the retrieved GUID. 
Figure 
21. 
Ramsay 
and 
Retro 
GUID 
encoding 
scheme 
The GUID retrieved by GetCurrentHwPro.le is speci.c for the system¡¯s hardware but not for the user or PC instance. Therefore, it is likely that by just leveraging this GUID operators may encounter duplicates intended to serialize different victims. 
The purpose of this scheme is to generate a GUID which is less likely to be duplicate-prone by ¡®salting¡¯ it with the machine¡¯s ethernet adapter address. This implies that Retro and Ramsay share the same scheme to generate unique identi.ers. 
We also found similarities in the way Ramsay and Retro saved some of their log .les, sharing a similar .lename convention: Is important to highlight that among Retro¡¯s documented techniques, it leverages malicious instances of msfte.dll, 
oci.dll 
and 
lame_enc.dll 
and 
via 
Phantom 
DLL 
Hijacking. 
As previously documented, Ramsay also uses this technique in some of its versions also using msfte.dll and oci.dll. 
Figure 
22. 
Some 
of 
Ramsay 
and 
Retro 
.lename 
convention 
In addition, we also observed similarities among Ramsay and Retro in regards to the open-source tools used 
among 
their 
toolsets, 
such 
as 
leveraging 
UACMe 
for 
privilege 
escalation 
and 
ImprovedRe.ectiveDLLInjection 
for 
deploying 
some 
of 
their 
components. 

Finally, we noticed Korean language metadata within the malicious documents leveraged by Ramsay, denoting the use of Korean-based templates. 
Figure 
23. 
Malicious 
document 
metadata 
showing 
the 
Korean 
word 
¡°title¡± 

Conclusion 
Based on the different instances of the framework found Ramsay has gone through various development stages, denoting an increasing progression in the number and complexity of its capabilities. 
Developers in charge of attack vectors seem to be trying various approaches such as old exploits for Word vulnerabilities from 2017 as well as deploying trojanized applications. 
We interpret this as that developers have a prior understanding of the victims¡¯ environment and are tailoring attack vectors that would successfully intrude into targeted systems without the need to waste unnecessary resources. 
Some stages of Ramsay¡¯s framework are still under evaluation, which could explain the current low visibility of victims, having in mind that Ramsay¡¯s intended targets may be under air-gapped networks, which would also impact victim visibility. 
We will continue monitoring new Ramsay activities and will publish relevant information on our blog. For any inquiries, contact us as threatintel@eset.com. Indicators of Compromise can also be found in our GitHub 
repository. 


Indicators of Compromise (IoCs) 
ESET detec- 
SHA-1  tion name  Comments  
f79da0d8bb1267f9906fad1111bd929a41b18c03  Win32/Trojan-Dropper.Agen©\t.SHN  Initial Installer  
62d2cc1f6eedba2f35a55beb96cd59a0a6c66880  Win32/Ram-say.A  Installer Launcher  
baa20ce99089fc35179802a0cc1149f929bdf0fa  Win32/Hack©\Tool.UACMe.T  UAC Bypass Module  
5c482bb8623329d4764492ff78b4fbc673b2ef23  Win32/Hack©\Tool.UACMe.T  UAC Bypass Module  
e7987627200d542b-b30d6f2386997f668b8a928c  Win32/Trojan-Dropper.Agen©\t.SHM  Spreader  
3bb205698e89955b4bd07a8a7de3fc75f1cb5cde  Win32/Trojan-Dropper.Agen©\t.SHN  Malware Installer  
bd8d0143ec75ef4c369f341c2786facbd9f73256  Win32/Hide-Proc.M  HideDriver Rootkit  
7d85b163d19942bb8d047793ff78ea728-da19870  Win32/Hide-Proc.M  HideDriver Rootkit  
3849e01bff610d155a3153c897bb662f5527c04c  Win64/Hack-Tool.Inject.A  Darkhotel Retro Backdoor Loader  
50eb291fc37fe05f9e55140b98b68d77bd61149e  Win32/Ram-say.B  Ramsay Initial Installer (version 2.b)  
https://www.welivesecurity.com/2020/05/13/ramsay-cyberespionage-toolkit-airgapped-networks/  16/19  

ESET detec-SHA-1 tion name Comments 
87ef7bf00fe6aa928c111c472e2472d2cb047eae Win32/Ex©\RTF .le that drops ploit.CVE-50e-2017-11882.H b291fc37fe05f9e55140b98b68d77b-
d61149e 
5a5738e2ec8af9f5400952be923e55a5780a8c55 Win32/Ram©\Ramsay Agent DLL (32bits)say.C 
19bf019fc0bf44828378f008332430a080871274 Win32/Ram©\Ramsay Agent EXE (32bits)say.C 
bd97b31998e9d673661ea5697fe436e©\Win32/Ram©\Ramsay Agent DLL (32bits)fe026cba1 say.C 
eb69b45faf3be0135f44293bc95f06dad73bc562 Win32/Ram©\Ramsay Agent DLL (32bits)say.C 
f74d86b6e9bd105ab65f2af10d60c4074b8044c9 Win64/Ram©\Ramsay Agent DLL (64bits)say.C 
ae722a90098d1c95829480e056ef8fd4a98eed©\Win64/Ram©\Ramsay Agent DLL (64bits)d7 say.C 


MITRE ATT&CK techniques 
Tactic ID Name Description 
Initial T1091 
Replication Ramsay¡¯s spreading mecha-Ac©\Through nism is done via removable cess Removable drives. 
Media 
Exe©\T1106 
Execution Ramsay¡¯s embedded compo-cution through API nents are executed via Create©\ProcessA and ShellExecute . 
T1129 
Execution Ramsay agent can be deliveredthrough as a DLL. Module Load 
T1203 
Exploitation Ramsay attack vectors exploitfor Client CVE-2017-1188 or CVE-2017-Execution 0199. 
T1035 
Service Ramsay components can beExecution executed as service dependencies. 
T1204 
User Ramsay Spreader componentExecution infects .les within the .le system. 
Tactic ID Name Description Tactic ID Name Description 
Per- T1103 
 AppInit Ramsay can use this registry 
sis©\ DLLs  key for persistence. 
tence  
T1050 
 New  Ramsay components can be 
Service  executed as service  
dependencies.  
T1053 
 Scheduled  Ramsay sets a scheduled task 
Task  to persist after reboot.  
Privi- T1088 
 Bypass Ramsay drops UACMe in- 
lege User Ac©\ stances for privilege escalation. 
Esca- count  
lation  Control  
De- T1038 
 DLL Order  Ramsay agents will masquer- 
fense  Hijacking  ade as service dependencies 
Eva©\ leveraging Phantom DLL 
sion  Hijacking.  
T1107 
 File  Ramsay installer is deleted af©\ 
Deletion  ter execution.  
T1055 
 Process  Ramsay¡¯s agent is injected into 
Injection  various processes.  
T1045 
 Software  Ramsay installer may be 
Packing  packed with UPX.  
Dis- T1083 
 File and Di©\ Ramsay agent scans for .les 
cov- rectory and directories on the system 
ery  Discovery  drive.  
T1057 
 Process  Ramsay will attempt to .nd if 
Discovery  host is already compromised by 
checking the existence of spe- 
ci.c processes.  
Later- T1210 
 Exploitation of Remote Ramsay network scanner 
al  Services  may scan the host¡¯s subnet 
Move©\ to .nd targets vulnerable to 
ment  EternalBlue.  
T1105 
 Remote  Ramsay attempts to infect .les 
File Copy  on network shares.  
T1091 
 Replication Ramsay attempts to infect .les 
Through on removable drives.  
Removable  
Media  
Col- T1119 
 Automated  Ramsay agent collects .les in 
lec©\ Collection  intervals.  
tion  

T1005 
 Data from Local System  Ramsay agent scans .les onsystem drive.  
T1039 
 Data from Network Shared Drive  Ramsay agent scans .les onnetwork shares.  
T1025 
 Data from Removable Media  Ramsay agent scans .les onremovable drives.  
T1113 
 Screen Capture  Ramsay agent may generateand collect screenshots.  
Com-mand and Con-trol  T1092 
 Communi-cation ThroughRemovable Media  Ramsay agent scans for control.les for its .le-based communi-cation protocol on removabledrives.  
T1094 
 Custom Command and Control Protocol  Ramsay implements a custom,.le-based C&C protocol.  

Ex.l©\T1002 
Data Ramsay agent compresses itstration Com©\collection directory. pressed 
Ignacio 
Sanmillan 
13 
May 
2020 
-11:30AM 
Newsletter 



